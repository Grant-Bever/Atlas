const orderService = require('../services/orderService');

// Controller to handle creating a new invoice
const createInvoice = async (req, res) => {
  try {
    const invoiceData = req.body;
    // The service handles validation of required fields
    const newInvoice = await orderService.createInvoice(invoiceData);
    // When creating, the invoice ID is generated by the DB and returned
    res.status(201).json(newInvoice);
  } catch (error) {
    console.error('Controller error creating invoice:', error.message);
    // Send appropriate error status code based on error type if needed
    if (error.message.includes('not found')) {
        return res.status(404).json({ message: error.message });
    }
    if (error.message.includes('Missing required')) {
        return res.status(400).json({ message: error.message });
    }
    res.status(500).json({ message: 'Failed to create invoice', error: error.message });
  }
};

// Controller to get active invoices
const getActiveInvoices = async (req, res) => {
  try {
    const invoices = await orderService.getActiveInvoices();
    res.status(200).json(invoices);
  } catch (error) {
    console.error('Controller error getting active invoices:', error.message);
    res.status(500).json({ message: 'Failed to retrieve active invoices', error: error.message });
  }
};

// Controller to get completed invoices
const getCompletedInvoices = async (req, res) => {
  try {
    const invoices = await orderService.getCompletedInvoices();
    res.status(200).json(invoices);
  } catch (error) {
    console.error('Controller error getting completed invoices:', error.message);
    res.status(500).json({ message: 'Failed to retrieve completed invoices', error: error.message });
  }
};

// Controller to get a single invoice by ID
const getInvoiceById = async (req, res) => {
  try {
    const { id } = req.params;
    if (!id) {
      return res.status(400).json({ message: 'Missing invoice ID.' });
    }

    const invoice = await orderService.getInvoiceById(Number(id));

    if (!invoice) {
      return res.status(404).json({ message: `Invoice with ID ${id} not found.` });
    }
    res.status(200).json(invoice);
  } catch (error) {
    console.error(`Controller error getting invoice ${req.params.id}:`, error.message);
    res.status(500).json({ message: 'Failed to retrieve invoice', error: error.message });
  }
};

// Controller to update an invoice (e.g., mark as completed, paid)
const updateInvoice = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    if (!id || Object.keys(updateData).length === 0) {
        return res.status(400).json({ message: 'Missing invoice ID or update data.' });
    }

    const updatedInvoice = await orderService.updateInvoice(Number(id), updateData);

    if (!updatedInvoice) {
      return res.status(404).json({ message: `Invoice with ID ${id} not found.` });
    }
    res.status(200).json(updatedInvoice);
  } catch (error) {
    console.error(`Controller error updating invoice ${req.params.id}:`, error.message);
    res.status(500).json({ message: 'Failed to update invoice', error: error.message });
  }
};

// Controller to delete an invoice
const deleteInvoice = async (req, res) => {
  try {
    const { id } = req.params;
    if (!id) {
        return res.status(400).json({ message: 'Missing invoice ID.' });
    }

    const success = await orderService.deleteInvoice(Number(id));

    if (!success) {
      return res.status(404).json({ message: `Invoice with ID ${id} not found.` });
    }
    // Send No Content response on successful deletion
    res.status(204).send();
  } catch (error) {
    console.error(`Controller error deleting invoice ${req.params.id}:`, error.message);
    res.status(500).json({ message: 'Failed to delete invoice', error: error.message });
  }
};

module.exports = {
  createInvoice,
  getActiveInvoices,
  getCompletedInvoices,
  getInvoiceById,
  updateInvoice,
  deleteInvoice
}; 