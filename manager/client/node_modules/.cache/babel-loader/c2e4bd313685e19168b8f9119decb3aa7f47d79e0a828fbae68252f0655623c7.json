{"ast":null,"code":"var _jsxFileName = \"/Users/christiansarmiento/Documents/GitHub/Atlas-V2/manager/client/src/pages/AddInventoryItem.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ManagerLayout from '../components/ManagerLayout';\nimport '../styles/FormPage.css'; // Shared form styles\n\n// Base URL for the API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// --- REMOVE Sample Data Fetching ---\n// const fetchInventoryItemData = (itemId) => { ... }; // REMOVED\n\nconst fetchCategories = () => {\n  // Simulate fetching existing categories - Keep for now, replace later if needed\n  return Promise.resolve(['Beef', 'Poultry', 'Pork', 'Miscellaneous']);\n};\n// --- End Sample Data Fetching ---\n\nconst ADD_NEW_CATEGORY_VALUE = '__add_new__';\nfunction AddInventoryItem() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    itemId\n  } = useParams();\n  const isEditing = Boolean(itemId);\n\n  // Form State\n  const [itemName, setItemName] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [pricePerPound, setPricePerPound] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState(''); // Holds the value from dropdown\n  const [newCategoryName, setNewCategoryName] = useState('');\n  const [showNewCategoryInput, setShowNewCategoryInput] = useState(false);\n\n  // Data State\n  const [existingCategories, setExistingCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch categories and item data (if editing)\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n\n    // Promise for fetching categories (using placeholder for now)\n    const categoriesPromise = fetchCategories();\n\n    // Promise for fetching item data ONLY if editing\n    const itemDataPromise = isEditing ? fetch(`${API_BASE_URL}/inventory/${itemId}`).then(res => {\n      if (!res.ok) {\n        if (res.status === 404) {\n          throw new Error('Inventory item not found.');\n        }\n        // Try to parse error message from backend\n        return res.json().then(errData => {\n          throw new Error(errData.message || 'Failed to fetch inventory item.');\n        });\n      }\n      return res.json(); // Parse successful response\n    }) : Promise.resolve(null); // Resolve with null if not editing\n\n    Promise.all([categoriesPromise, itemDataPromise]).then(([categories, itemData]) => {\n      setExistingCategories(categories || []);\n      if (isEditing) {\n        if (itemData) {\n          setItemName(itemData.name || '');\n          setQuantity(itemData.quantity !== undefined ? String(itemData.quantity) : '');\n          // Use price_per_pound from backend data\n          setPricePerPound(itemData.price_per_pound !== undefined ? String(itemData.price_per_pound) : '');\n          const itemCategory = itemData.category || '';\n          // Ensure the item's category is in the list, even if it was newly created before\n          if (itemCategory && !categories.includes(itemCategory)) {\n            setExistingCategories(prev => [...new Set([...prev, itemCategory])]); // Use Set to avoid duplicates\n          }\n          setSelectedCategory(itemCategory);\n        } else {\n          // This case might be handled by the fetch error now, but keep as fallback\n          setError('Inventory item not found.');\n        }\n      } else {\n        // Default to first category or empty if none exist when creating\n        setSelectedCategory(categories.length > 0 ? categories[0] : '');\n      }\n    }).catch(err => {\n      console.error(\"Error loading data:\", err);\n      setError(err.message || 'Failed to load data.'); // Display specific error message\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  }, [itemId, isEditing]); // Dependencies: itemId and isEditing\n\n  // Handle category dropdown change\n  const handleCategoryChange = e => {\n    const value = e.target.value;\n    setSelectedCategory(value);\n    if (value === ADD_NEW_CATEGORY_VALUE) {\n      setShowNewCategoryInput(true);\n    } else {\n      setShowNewCategoryInput(false);\n      setNewCategoryName(''); // Clear new category name if selecting existing\n    }\n  };\n\n  // Handle Form Submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    let finalCategory = selectedCategory;\n    if (selectedCategory === ADD_NEW_CATEGORY_VALUE) {\n      if (!newCategoryName.trim()) {\n        alert('Please enter a name for the new category.'); // Basic validation\n        return;\n      }\n      finalCategory = newCategoryName.trim();\n      // TODO: API call to potentially create the new category if it doesn't exist\n      console.log(\"Creating/Using new category:\", finalCategory);\n    }\n\n    // TODO: Add more robust validation\n\n    const itemPayload = {\n      name: itemName,\n      category: finalCategory,\n      quantity: parseFloat(quantity) || 0,\n      price_per_pound: parseFloat(pricePerPound) || 0\n      // Add price_per_box if you have an input & state for it\n      // price_per_box: parseFloat(pricePerBox) || 0 \n    };\n\n    // Clear previous errors\n    setError(null);\n    const saveItem = async () => {\n      setIsLoading(true); // Show loading state during save\n      try {\n        let response;\n        let successMessage;\n        if (isEditing) {\n          console.log(`UPDATING Item ${itemId}:`, itemPayload);\n          // --- Update Item API Call ---\n          response = await fetch(`${API_BASE_URL}/inventory/${itemId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(itemPayload)\n          });\n          successMessage = 'Item updated successfully!';\n        } else {\n          console.log(\"SAVING New Item:\", itemPayload);\n          // --- Create Item API Call ---\n          response = await fetch(`${API_BASE_URL}/inventory`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(itemPayload)\n          });\n          successMessage = 'Item added successfully!';\n        }\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `Failed to ${isEditing ? 'update' : 'save'} item.`);\n        }\n        console.log(successMessage);\n        navigate('/inventory'); // Navigate back only on success\n      } catch (err) {\n        console.error(`Error ${isEditing ? 'updating' : 'saving'} item:`, err);\n        setError(err.message); // Display error on the form page\n      } finally {\n        setIsLoading(false); // Hide loading state\n      }\n    };\n    saveItem(); // Call the async function\n  };\n  const handleCancel = () => {\n    navigate('/inventory');\n  };\n\n  // --- Render Logic ---\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red',\n          padding: '20px'\n        },\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n    pageTitle: isEditing ? `Edit Item: ${itemName || itemId}` : 'Add New Inventory Item',\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-page-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-page-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: isEditing ? 'Edit Item Details' : 'Add New Item'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-page-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleCancel,\n              className: \"button button-secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"button button-primary\",\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"itemName\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"itemName\",\n              value: itemName,\n              onChange: e => setItemName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"itemCategory\",\n              children: \"Item Type / Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"itemCategory\",\n              value: selectedCategory,\n              onChange: handleCategoryChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: !isEditing,\n                children: \"-- Select Category --\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 17\n              }, this), \" \", existingCategories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: cat,\n                children: cat\n              }, cat, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: ADD_NEW_CATEGORY_VALUE,\n                children: \"+ Add New Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), showNewCategoryInput && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"newCategoryName\",\n              children: \"New Category Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"newCategoryName\",\n              value: newCategoryName,\n              onChange: e => setNewCategoryName(e.target.value),\n              placeholder: \"Enter new category name\",\n              required: selectedCategory === ADD_NEW_CATEGORY_VALUE // Make required only when adding\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"quantity\",\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              id: \"quantity\",\n              value: quantity,\n              onChange: e => setQuantity(e.target.value),\n              required: true,\n              placeholder: \"e.g., 50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"pricePerPound\",\n              children: \"Price / Pound ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              id: \"pricePerPound\",\n              value: pricePerPound,\n              onChange: e => setPricePerPound(e.target.value),\n              required: true,\n              placeholder: \"e.g., 4.99\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_s(AddInventoryItem, \"/By/vv6wXsrVZ/9ckHLLyqNjmnY=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = AddInventoryItem;\nexport default AddInventoryItem;\nvar _c;\n$RefreshReg$(_c, \"AddInventoryItem\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","ManagerLayout","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","fetchCategories","Promise","resolve","ADD_NEW_CATEGORY_VALUE","AddInventoryItem","_s","navigate","itemId","isEditing","Boolean","itemName","setItemName","quantity","setQuantity","pricePerPound","setPricePerPound","selectedCategory","setSelectedCategory","newCategoryName","setNewCategoryName","showNewCategoryInput","setShowNewCategoryInput","existingCategories","setExistingCategories","isLoading","setIsLoading","error","setError","categoriesPromise","itemDataPromise","fetch","then","res","ok","status","Error","json","errData","message","all","categories","itemData","name","undefined","String","price_per_pound","itemCategory","category","includes","prev","Set","length","catch","err","console","finally","handleCategoryChange","e","value","target","handleSubmit","preventDefault","finalCategory","trim","alert","log","itemPayload","parseFloat","saveItem","response","successMessage","method","headers","body","JSON","stringify","errorData","handleCancel","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","padding","pageTitle","className","onSubmit","type","onClick","htmlFor","id","onChange","required","disabled","map","cat","placeholder","step","_c","$RefreshReg$"],"sources":["/Users/christiansarmiento/Documents/GitHub/Atlas-V2/manager/client/src/pages/AddInventoryItem.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ManagerLayout from '../components/ManagerLayout';\nimport '../styles/FormPage.css'; // Shared form styles\n\n// Base URL for the API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// --- REMOVE Sample Data Fetching ---\n// const fetchInventoryItemData = (itemId) => { ... }; // REMOVED\n\nconst fetchCategories = () => {\n    // Simulate fetching existing categories - Keep for now, replace later if needed\n    return Promise.resolve(['Beef', 'Poultry', 'Pork', 'Miscellaneous']);\n};\n// --- End Sample Data Fetching ---\n\nconst ADD_NEW_CATEGORY_VALUE = '__add_new__';\n\nfunction AddInventoryItem() {\n  const navigate = useNavigate();\n  const { itemId } = useParams();\n  const isEditing = Boolean(itemId);\n\n  // Form State\n  const [itemName, setItemName] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [pricePerPound, setPricePerPound] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState(''); // Holds the value from dropdown\n  const [newCategoryName, setNewCategoryName] = useState('');\n  const [showNewCategoryInput, setShowNewCategoryInput] = useState(false);\n\n  // Data State\n  const [existingCategories, setExistingCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch categories and item data (if editing)\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n\n    // Promise for fetching categories (using placeholder for now)\n    const categoriesPromise = fetchCategories();\n\n    // Promise for fetching item data ONLY if editing\n    const itemDataPromise = isEditing\n        ? fetch(`${API_BASE_URL}/inventory/${itemId}`)\n            .then(res => {\n                if (!res.ok) {\n                    if (res.status === 404) {\n                        throw new Error('Inventory item not found.');\n                    }\n                    // Try to parse error message from backend\n                    return res.json().then(errData => {\n                         throw new Error(errData.message || 'Failed to fetch inventory item.');\n                    });\n                }\n                return res.json(); // Parse successful response\n            })\n        : Promise.resolve(null); // Resolve with null if not editing\n\n    Promise.all([categoriesPromise, itemDataPromise])\n      .then(([categories, itemData]) => {\n        setExistingCategories(categories || []);\n\n        if (isEditing) {\n          if (itemData) {\n            setItemName(itemData.name || '');\n            setQuantity(itemData.quantity !== undefined ? String(itemData.quantity) : '');\n            // Use price_per_pound from backend data\n            setPricePerPound(itemData.price_per_pound !== undefined ? String(itemData.price_per_pound) : '');\n\n            const itemCategory = itemData.category || '';\n            // Ensure the item's category is in the list, even if it was newly created before\n            if (itemCategory && !categories.includes(itemCategory)) {\n                 setExistingCategories(prev => [...new Set([...prev, itemCategory])]); // Use Set to avoid duplicates\n            }\n            setSelectedCategory(itemCategory);\n\n          } else {\n            // This case might be handled by the fetch error now, but keep as fallback\n            setError('Inventory item not found.');\n          }\n        } else {\n             // Default to first category or empty if none exist when creating\n             setSelectedCategory(categories.length > 0 ? categories[0] : '');\n        }\n      })\n      .catch(err => {\n        console.error(\"Error loading data:\", err);\n        setError(err.message || 'Failed to load data.'); // Display specific error message\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [itemId, isEditing]); // Dependencies: itemId and isEditing\n\n  // Handle category dropdown change\n  const handleCategoryChange = (e) => {\n    const value = e.target.value;\n    setSelectedCategory(value);\n    if (value === ADD_NEW_CATEGORY_VALUE) {\n      setShowNewCategoryInput(true);\n    } else {\n      setShowNewCategoryInput(false);\n      setNewCategoryName(''); // Clear new category name if selecting existing\n    }\n  };\n\n  // Handle Form Submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let finalCategory = selectedCategory;\n    if (selectedCategory === ADD_NEW_CATEGORY_VALUE) {\n        if (!newCategoryName.trim()) {\n            alert('Please enter a name for the new category.'); // Basic validation\n            return;\n        }\n        finalCategory = newCategoryName.trim();\n        // TODO: API call to potentially create the new category if it doesn't exist\n        console.log(\"Creating/Using new category:\", finalCategory);\n    }\n\n    // TODO: Add more robust validation\n    \n    const itemPayload = {\n        name: itemName,\n        category: finalCategory,\n        quantity: parseFloat(quantity) || 0,\n        price_per_pound: parseFloat(pricePerPound) || 0,\n        // Add price_per_box if you have an input & state for it\n        // price_per_box: parseFloat(pricePerBox) || 0 \n    };\n\n    // Clear previous errors\n    setError(null);\n\n    const saveItem = async () => {\n        setIsLoading(true); // Show loading state during save\n        try {\n            let response;\n            let successMessage;\n\n            if (isEditing) {\n                console.log(`UPDATING Item ${itemId}:`, itemPayload);\n                // --- Update Item API Call ---\n                response = await fetch(`${API_BASE_URL}/inventory/${itemId}`, {\n                    method: 'PUT',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(itemPayload)\n                });\n                successMessage = 'Item updated successfully!';\n            } else {\n                console.log(\"SAVING New Item:\", itemPayload);\n                // --- Create Item API Call ---\n                response = await fetch(`${API_BASE_URL}/inventory`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(itemPayload)\n                });\n                successMessage = 'Item added successfully!';\n            }\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || `Failed to ${isEditing ? 'update' : 'save'} item.`);\n            }\n\n            console.log(successMessage);\n            navigate('/inventory'); // Navigate back only on success\n\n        } catch (err) {\n            console.error(`Error ${isEditing ? 'updating' : 'saving'} item:`, err);\n            setError(err.message); // Display error on the form page\n        } finally {\n            setIsLoading(false); // Hide loading state\n        }\n    };\n\n    saveItem(); // Call the async function\n  };\n\n  const handleCancel = () => {\n    navigate('/inventory');\n  };\n\n  // --- Render Logic ---\n  if (isLoading) {\n    return <ManagerLayout><div>Loading...</div></ManagerLayout>;\n  }\n\n  if (error) {\n    return <ManagerLayout><div style={{ color: 'red', padding: '20px' }}>Error: {error}</div></ManagerLayout>;\n  }\n\n  return (\n    <ManagerLayout pageTitle={isEditing ? `Edit Item: ${itemName || itemId}` : 'Add New Inventory Item'}>\n      <div className=\"form-page-container\">\n        <form onSubmit={handleSubmit}>\n           {/* Use same header structure as AddEmployee */}\n          <div className=\"form-page-header\">\n            <h2>{isEditing ? 'Edit Item Details' : 'Add New Item'}</h2>\n            <div className=\"form-page-actions\">\n              <button type=\"button\" onClick={handleCancel} className=\"button button-secondary\">Cancel</button>\n              <button type=\"submit\" className=\"button button-primary\">Confirm</button>\n            </div>\n          </div>\n\n          {/* Form Fields */}\n          <div className=\"form-grid\">\n            <div className=\"form-field\">\n              <label htmlFor=\"itemName\">Name</label>\n              <input type=\"text\" id=\"itemName\" value={itemName} onChange={(e) => setItemName(e.target.value)} required />\n            </div>\n            \n            <div className=\"form-field\">\n              <label htmlFor=\"itemCategory\">Item Type / Category</label>\n              <select id=\"itemCategory\" value={selectedCategory} onChange={handleCategoryChange} required>\n                <option value=\"\" disabled={!isEditing}>-- Select Category --</option> {/* Allow empty selection only if not editing */} \n                {existingCategories.map(cat => (\n                    <option key={cat} value={cat}>{cat}</option>\n                ))}\n                <option value={ADD_NEW_CATEGORY_VALUE}>+ Add New Category</option>\n              </select>\n            </div>\n\n            {/* Conditionally show input for new category name */} \n            {showNewCategoryInput && (\n                <div className=\"form-field\">\n                    <label htmlFor=\"newCategoryName\">New Category Name</label>\n                    <input \n                        type=\"text\" \n                        id=\"newCategoryName\" \n                        value={newCategoryName} \n                        onChange={(e) => setNewCategoryName(e.target.value)} \n                        placeholder=\"Enter new category name\" \n                        required={selectedCategory === ADD_NEW_CATEGORY_VALUE} // Make required only when adding\n                    />\n                </div>\n            )}\n\n            <div className=\"form-field\">\n              <label htmlFor=\"quantity\">Quantity</label>\n              <input type=\"number\" id=\"quantity\" value={quantity} onChange={(e) => setQuantity(e.target.value)} required placeholder=\"e.g., 50\"/>\n            </div>\n\n            <div className=\"form-field\">\n              <label htmlFor=\"pricePerPound\">Price / Pound ($)</label>\n              <input type=\"number\" step=\"0.01\" id=\"pricePerPound\" value={pricePerPound} onChange={(e) => setPricePerPound(e.target.value)} required placeholder=\"e.g., 4.99\"/>\n            </div>\n          </div>\n        </form>\n      </div>\n    </ManagerLayout>\n  );\n}\n\nexport default AddInventoryItem; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAO,wBAAwB,CAAC,CAAC;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA;;AAEA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B;EACA,OAAOC,OAAO,CAACC,OAAO,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;AACxE,CAAC;AACD;;AAEA,MAAMC,sBAAsB,GAAG,aAAa;AAE5C,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEgB;EAAO,CAAC,GAAGf,SAAS,CAAC,CAAC;EAC9B,MAAMgB,SAAS,GAAGC,OAAO,CAACF,MAAM,CAAC;;EAEjC;EACA,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC2B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9D,MAAM,CAAC6B,eAAe,EAAEC,kBAAkB,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC+B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;;EAEvE;EACA,MAAM,CAACiC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACmC,SAAS,EAAEC,YAAY,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACqC,KAAK,EAAEC,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACdmC,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACA,MAAMC,iBAAiB,GAAG5B,eAAe,CAAC,CAAC;;IAE3C;IACA,MAAM6B,eAAe,GAAGrB,SAAS,GAC3BsB,KAAK,CAAC,GAAGlC,YAAY,cAAcW,MAAM,EAAE,CAAC,CACzCwB,IAAI,CAACC,GAAG,IAAI;MACT,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;QACT,IAAID,GAAG,CAACE,MAAM,KAAK,GAAG,EAAE;UACpB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAChD;QACA;QACA,OAAOH,GAAG,CAACI,IAAI,CAAC,CAAC,CAACL,IAAI,CAACM,OAAO,IAAI;UAC7B,MAAM,IAAIF,KAAK,CAACE,OAAO,CAACC,OAAO,IAAI,iCAAiC,CAAC;QAC1E,CAAC,CAAC;MACN;MACA,OAAON,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,GACJnC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;IAE7BD,OAAO,CAACsC,GAAG,CAAC,CAACX,iBAAiB,EAAEC,eAAe,CAAC,CAAC,CAC9CE,IAAI,CAAC,CAAC,CAACS,UAAU,EAAEC,QAAQ,CAAC,KAAK;MAChClB,qBAAqB,CAACiB,UAAU,IAAI,EAAE,CAAC;MAEvC,IAAIhC,SAAS,EAAE;QACb,IAAIiC,QAAQ,EAAE;UACZ9B,WAAW,CAAC8B,QAAQ,CAACC,IAAI,IAAI,EAAE,CAAC;UAChC7B,WAAW,CAAC4B,QAAQ,CAAC7B,QAAQ,KAAK+B,SAAS,GAAGC,MAAM,CAACH,QAAQ,CAAC7B,QAAQ,CAAC,GAAG,EAAE,CAAC;UAC7E;UACAG,gBAAgB,CAAC0B,QAAQ,CAACI,eAAe,KAAKF,SAAS,GAAGC,MAAM,CAACH,QAAQ,CAACI,eAAe,CAAC,GAAG,EAAE,CAAC;UAEhG,MAAMC,YAAY,GAAGL,QAAQ,CAACM,QAAQ,IAAI,EAAE;UAC5C;UACA,IAAID,YAAY,IAAI,CAACN,UAAU,CAACQ,QAAQ,CAACF,YAAY,CAAC,EAAE;YACnDvB,qBAAqB,CAAC0B,IAAI,IAAI,CAAC,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAGD,IAAI,EAAEH,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC3E;UACA7B,mBAAmB,CAAC6B,YAAY,CAAC;QAEnC,CAAC,MAAM;UACL;UACAnB,QAAQ,CAAC,2BAA2B,CAAC;QACvC;MACF,CAAC,MAAM;QACF;QACAV,mBAAmB,CAACuB,UAAU,CAACW,MAAM,GAAG,CAAC,GAAGX,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;MACpE;IACF,CAAC,CAAC,CACDY,KAAK,CAACC,GAAG,IAAI;MACZC,OAAO,CAAC5B,KAAK,CAAC,qBAAqB,EAAE2B,GAAG,CAAC;MACzC1B,QAAQ,CAAC0B,GAAG,CAACf,OAAO,IAAI,sBAAsB,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CACDiB,OAAO,CAAC,MAAM;MACb9B,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,CAAClB,MAAM,EAAEC,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEzB;EACA,MAAMgD,oBAAoB,GAAIC,CAAC,IAAK;IAClC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BzC,mBAAmB,CAACyC,KAAK,CAAC;IAC1B,IAAIA,KAAK,KAAKvD,sBAAsB,EAAE;MACpCkB,uBAAuB,CAAC,IAAI,CAAC;IAC/B,CAAC,MAAM;MACLA,uBAAuB,CAAC,KAAK,CAAC;MAC9BF,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;;EAED;EACA,MAAMyC,YAAY,GAAIH,CAAC,IAAK;IAC1BA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB,IAAIC,aAAa,GAAG9C,gBAAgB;IACpC,IAAIA,gBAAgB,KAAKb,sBAAsB,EAAE;MAC7C,IAAI,CAACe,eAAe,CAAC6C,IAAI,CAAC,CAAC,EAAE;QACzBC,KAAK,CAAC,2CAA2C,CAAC,CAAC,CAAC;QACpD;MACJ;MACAF,aAAa,GAAG5C,eAAe,CAAC6C,IAAI,CAAC,CAAC;MACtC;MACAT,OAAO,CAACW,GAAG,CAAC,8BAA8B,EAAEH,aAAa,CAAC;IAC9D;;IAEA;;IAEA,MAAMI,WAAW,GAAG;MAChBxB,IAAI,EAAEhC,QAAQ;MACdqC,QAAQ,EAAEe,aAAa;MACvBlD,QAAQ,EAAEuD,UAAU,CAACvD,QAAQ,CAAC,IAAI,CAAC;MACnCiC,eAAe,EAAEsB,UAAU,CAACrD,aAAa,CAAC,IAAI;MAC9C;MACA;IACJ,CAAC;;IAED;IACAa,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMyC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB3C,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACpB,IAAI;QACA,IAAI4C,QAAQ;QACZ,IAAIC,cAAc;QAElB,IAAI9D,SAAS,EAAE;UACX8C,OAAO,CAACW,GAAG,CAAC,iBAAiB1D,MAAM,GAAG,EAAE2D,WAAW,CAAC;UACpD;UACAG,QAAQ,GAAG,MAAMvC,KAAK,CAAC,GAAGlC,YAAY,cAAcW,MAAM,EAAE,EAAE;YAC1DgE,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;UACpC,CAAC,CAAC;UACFI,cAAc,GAAG,4BAA4B;QACjD,CAAC,MAAM;UACHhB,OAAO,CAACW,GAAG,CAAC,kBAAkB,EAAEC,WAAW,CAAC;UAC5C;UACAG,QAAQ,GAAG,MAAMvC,KAAK,CAAC,GAAGlC,YAAY,YAAY,EAAE;YAChD2E,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB,CAAC;YAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;UACpC,CAAC,CAAC;UACFI,cAAc,GAAG,0BAA0B;QAC/C;QAEA,IAAI,CAACD,QAAQ,CAACpC,EAAE,EAAE;UACd,MAAM2C,SAAS,GAAG,MAAMP,QAAQ,CAACjC,IAAI,CAAC,CAAC;UACvC,MAAM,IAAID,KAAK,CAACyC,SAAS,CAACtC,OAAO,IAAI,aAAa9B,SAAS,GAAG,QAAQ,GAAG,MAAM,QAAQ,CAAC;QAC5F;QAEA8C,OAAO,CAACW,GAAG,CAACK,cAAc,CAAC;QAC3BhE,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;MAE5B,CAAC,CAAC,OAAO+C,GAAG,EAAE;QACVC,OAAO,CAAC5B,KAAK,CAAC,SAASlB,SAAS,GAAG,UAAU,GAAG,QAAQ,QAAQ,EAAE6C,GAAG,CAAC;QACtE1B,QAAQ,CAAC0B,GAAG,CAACf,OAAO,CAAC,CAAC,CAAC;MAC3B,CAAC,SAAS;QACNb,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACzB;IACJ,CAAC;IAED2C,QAAQ,CAAC,CAAC,CAAC,CAAC;EACd,CAAC;EAED,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzBvE,QAAQ,CAAC,YAAY,CAAC;EACxB,CAAC;;EAED;EACA,IAAIkB,SAAS,EAAE;IACb,oBAAO7B,OAAA,CAACF,aAAa;MAAAqF,QAAA,eAACnF,OAAA;QAAAmF,QAAA,EAAK;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC;EAC7D;EAEA,IAAIxD,KAAK,EAAE;IACT,oBAAO/B,OAAA,CAACF,aAAa;MAAAqF,QAAA,eAACnF,OAAA;QAAKwF,KAAK,EAAE;UAAEC,KAAK,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAO,CAAE;QAAAP,QAAA,GAAC,SAAO,EAACpD,KAAK;MAAA;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC;EAC3G;EAEA,oBACEvF,OAAA,CAACF,aAAa;IAAC6F,SAAS,EAAE9E,SAAS,GAAG,cAAcE,QAAQ,IAAIH,MAAM,EAAE,GAAG,wBAAyB;IAAAuE,QAAA,eAClGnF,OAAA;MAAK4F,SAAS,EAAC,qBAAqB;MAAAT,QAAA,eAClCnF,OAAA;QAAM6F,QAAQ,EAAE5B,YAAa;QAAAkB,QAAA,gBAE3BnF,OAAA;UAAK4F,SAAS,EAAC,kBAAkB;UAAAT,QAAA,gBAC/BnF,OAAA;YAAAmF,QAAA,EAAKtE,SAAS,GAAG,mBAAmB,GAAG;UAAc;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC3DvF,OAAA;YAAK4F,SAAS,EAAC,mBAAmB;YAAAT,QAAA,gBAChCnF,OAAA;cAAQ8F,IAAI,EAAC,QAAQ;cAACC,OAAO,EAAEb,YAAa;cAACU,SAAS,EAAC,yBAAyB;cAAAT,QAAA,EAAC;YAAM;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAChGvF,OAAA;cAAQ8F,IAAI,EAAC,QAAQ;cAACF,SAAS,EAAC,uBAAuB;cAAAT,QAAA,EAAC;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGNvF,OAAA;UAAK4F,SAAS,EAAC,WAAW;UAAAT,QAAA,gBACxBnF,OAAA;YAAK4F,SAAS,EAAC,YAAY;YAAAT,QAAA,gBACzBnF,OAAA;cAAOgG,OAAO,EAAC,UAAU;cAAAb,QAAA,EAAC;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtCvF,OAAA;cAAO8F,IAAI,EAAC,MAAM;cAACG,EAAE,EAAC,UAAU;cAAClC,KAAK,EAAEhD,QAAS;cAACmF,QAAQ,EAAGpC,CAAC,IAAK9C,WAAW,CAAC8C,CAAC,CAACE,MAAM,CAACD,KAAK,CAAE;cAACoC,QAAQ;YAAA;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxG,CAAC,eAENvF,OAAA;YAAK4F,SAAS,EAAC,YAAY;YAAAT,QAAA,gBACzBnF,OAAA;cAAOgG,OAAO,EAAC,cAAc;cAAAb,QAAA,EAAC;YAAoB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC1DvF,OAAA;cAAQiG,EAAE,EAAC,cAAc;cAAClC,KAAK,EAAE1C,gBAAiB;cAAC6E,QAAQ,EAAErC,oBAAqB;cAACsC,QAAQ;cAAAhB,QAAA,gBACzFnF,OAAA;gBAAQ+D,KAAK,EAAC,EAAE;gBAACqC,QAAQ,EAAE,CAACvF,SAAU;gBAAAsE,QAAA,EAAC;cAAqB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EACrE5D,kBAAkB,CAAC0E,GAAG,CAACC,GAAG,iBACvBtG,OAAA;gBAAkB+D,KAAK,EAAEuC,GAAI;gBAAAnB,QAAA,EAAEmB;cAAG,GAArBA,GAAG;gBAAAlB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAA2B,CAC9C,CAAC,eACFvF,OAAA;gBAAQ+D,KAAK,EAAEvD,sBAAuB;gBAAA2E,QAAA,EAAC;cAAkB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,EAGL9D,oBAAoB,iBACjBzB,OAAA;YAAK4F,SAAS,EAAC,YAAY;YAAAT,QAAA,gBACvBnF,OAAA;cAAOgG,OAAO,EAAC,iBAAiB;cAAAb,QAAA,EAAC;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC1DvF,OAAA;cACI8F,IAAI,EAAC,MAAM;cACXG,EAAE,EAAC,iBAAiB;cACpBlC,KAAK,EAAExC,eAAgB;cACvB2E,QAAQ,EAAGpC,CAAC,IAAKtC,kBAAkB,CAACsC,CAAC,CAACE,MAAM,CAACD,KAAK,CAAE;cACpDwC,WAAW,EAAC,yBAAyB;cACrCJ,QAAQ,EAAE9E,gBAAgB,KAAKb,sBAAuB,CAAC;YAAA;cAAA4E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CACR,eAEDvF,OAAA;YAAK4F,SAAS,EAAC,YAAY;YAAAT,QAAA,gBACzBnF,OAAA;cAAOgG,OAAO,EAAC,UAAU;cAAAb,QAAA,EAAC;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC1CvF,OAAA;cAAO8F,IAAI,EAAC,QAAQ;cAACG,EAAE,EAAC,UAAU;cAAClC,KAAK,EAAE9C,QAAS;cAACiF,QAAQ,EAAGpC,CAAC,IAAK5C,WAAW,CAAC4C,CAAC,CAACE,MAAM,CAACD,KAAK,CAAE;cAACoC,QAAQ;cAACI,WAAW,EAAC;YAAU;cAAAnB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChI,CAAC,eAENvF,OAAA;YAAK4F,SAAS,EAAC,YAAY;YAAAT,QAAA,gBACzBnF,OAAA;cAAOgG,OAAO,EAAC,eAAe;cAAAb,QAAA,EAAC;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACxDvF,OAAA;cAAO8F,IAAI,EAAC,QAAQ;cAACU,IAAI,EAAC,MAAM;cAACP,EAAE,EAAC,eAAe;cAAClC,KAAK,EAAE5C,aAAc;cAAC+E,QAAQ,EAAGpC,CAAC,IAAK1C,gBAAgB,CAAC0C,CAAC,CAACE,MAAM,CAACD,KAAK,CAAE;cAACoC,QAAQ;cAACI,WAAW,EAAC;YAAY;cAAAnB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7J,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEpB;AAAC7E,EAAA,CA7OQD,gBAAgB;EAAA,QACNb,WAAW,EACTC,SAAS;AAAA;AAAA4G,EAAA,GAFrBhG,gBAAgB;AA+OzB,eAAeA,gBAAgB;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}