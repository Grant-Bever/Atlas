{"ast":null,"code":"var _jsxFileName = \"/Users/christiansarmiento/Documents/GitHub/Atlas-V2/client/src/pages/ManagerNewInvoice.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ManagerLayout from '../components/ManagerLayout';\nimport { FaPlus, FaTrashAlt } from 'react-icons/fa';\nimport '../styles/InvoiceForm.css';\n\n// Base URL for the API (Consider moving this to a config file)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Function to get formatted date yyyy-mm-dd\nconst getFormattedDate = (date = new Date()) => {\n  return date.toISOString().split('T')[0];\n};\n\n// --- Removed Sample Data Fetching ---\n\nfunction ManagerNewInvoice() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    orderId\n  } = useParams(); // orderId will be undefined when creating new\n  const isEditing = Boolean(orderId);\n\n  // State for form fields\n  const [customerId, setCustomerId] = useState('');\n  const [invoiceDate, setInvoiceDate] = useState(getFormattedDate());\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n\n  // State for managing related data (customers)\n  const [customers, setCustomers] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n\n  // State for UI control\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [invoiceNumber, setInvoiceNumber] = useState(isEditing ? orderId : 'Auto-Generated'); // For display\n\n  // --- Fetch Initial Data (Customers) ---\n  useEffect(() => {\n    const fetchCustomers = async () => {\n      setIsLoading(true);\n      try {\n        // TODO: Replace with actual customer API endpoint when available\n        // const response = await fetch(`${API_BASE_URL}/customers`);\n        // if (!response.ok) throw new Error('Failed to fetch customers');\n        // const data = await response.json();\n        // setCustomers(data);\n\n        // --- Placeholder Customers --- \n        const placeholderCustomers = [{\n          id: 1,\n          name: 'Michoacano Market',\n          phone: '123-456-7890',\n          email: 'micho@test.com'\n        }, {\n          id: 2,\n          name: 'Mosner Family Brands',\n          phone: '987-654-3210',\n          email: 'mosner@test.com'\n        }, {\n          id: 3,\n          name: 'Carniceria Mexicana',\n          phone: '555-123-4567',\n          email: 'carni@test.com'\n        }, {\n          id: 4,\n          name: 'Tomoe Sushi',\n          phone: '555-987-6543',\n          email: 'tomoe@test.com'\n        }];\n        setCustomers(placeholderCustomers);\n        // --- End Placeholder --- \n\n        setError(null);\n      } catch (err) {\n        console.error(\"Error fetching customers:\", err);\n        setError('Failed to load customer data. Please try again later.');\n        setCustomers([]); // Ensure customers is empty on error\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCustomers();\n  }, []);\n\n  // --- Fetch Order Data if Editing (Not implemented yet) ---\n  useEffect(() => {\n    if (isEditing) {\n      // TODO: Implement fetching existing order data for editing\n      console.warn(\"Edit mode not fully implemented yet. Fetching existing order data is required.\");\n      setError(\"Editing existing invoices is not yet supported.\");\n      setIsLoading(false);\n      // When implemented, fetch the order by orderId, populate customerId, invoiceDate, items, total\n      // Example fetch:\n      /*\n      const fetchOrder = async () => {\n          setIsLoading(true);\n          try {\n              const response = await fetch(`${API_BASE_URL}/orders/${orderId}`); // Need endpoint to get single order\n              if (!response.ok) throw new Error('Failed to fetch order');\n              const orderData = await response.json();\n              setCustomerId(orderData.customer_id);\n              setSelectedCustomer(customers.find(c => c.id === orderData.customer_id) || null);\n              setInvoiceDate(getFormattedDate(new Date(orderData.date)));\n              setItems(orderData.items.map(item => ({ ...item, id: item.id || Date.now() + Math.random() })) || []);\n              setTotal(orderData.total || 0);\n              setInvoiceNumber(orderData.id);\n              setError(null);\n          } catch (err) {\n              console.error(\"Error fetching order for edit:\", err);\n              setError(`Failed to load order ${orderId} for editing.`);\n          } finally {\n              setIsLoading(false);\n          }\n      };\n      if (customers.length > 0) { // Ensure customers are loaded before trying to find the selected one\n           fetchOrder();\n      }\n      */\n    } else {\n      // Start with one empty row for new invoice\n      setItems([{\n        id: Date.now(),\n        quantity: '',\n        item: '',\n        weight: '',\n        price: '',\n        notes: '',\n        amount: 0\n      }]);\n    }\n  }, [orderId, isEditing, customers]); // Added customers dependency for edit mode logic\n\n  // --- Item Management ---\n  const addItemRow = () => {\n    const newId = Date.now() + Math.random(); // Add randomness for better uniqueness\n    setItems([...items, {\n      id: newId,\n      quantity: '',\n      item: '',\n      weight: '',\n      price: '',\n      notes: '',\n      amount: 0\n    }]);\n  };\n  const handleItemChange = (id, field, value) => {\n    setItems(prevItems => {\n      return prevItems.map(item => {\n        if (item.id === id) {\n          const newItem = {\n            ...item,\n            [field]: value\n          };\n          // Recalculate amount if quantity or price changes\n          if (field === 'quantity' || field === 'price') {\n            const quantity = parseFloat(newItem.quantity) || 0;\n            const price = parseFloat(newItem.price) || 0;\n            newItem.amount = quantity * price;\n          }\n          return newItem;\n        }\n        return item;\n      });\n    });\n  };\n  const removeItemRow = id => {\n    setItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n\n  // Calculate total whenever items change\n  useEffect(() => {\n    const newTotal = items.reduce((sum, item) => {\n      const amount = parseFloat(item.amount) || 0;\n      return sum + amount;\n    }, 0);\n    setTotal(newTotal);\n  }, [items]);\n\n  // --- Customer Selection ---\n  const handleCustomerChange = event => {\n    const selectedId = event.target.value;\n    setCustomerId(selectedId);\n    const customer = customers.find(c => c.id === parseInt(selectedId, 10));\n    setSelectedCustomer(customer || null);\n  };\n\n  // --- Form Submission/Cancellation Handlers ---\n  const handleSave = async event => {\n    event.preventDefault(); // Prevent default form submission\n    setError(null); // Clear previous errors\n    setSuccessMessage(null);\n    setIsLoading(true);\n\n    // Basic Validation\n    if (!customerId) {\n      setError('Please select a customer.');\n      setIsLoading(false);\n      return;\n    }\n    if (items.length === 0) {\n      setError('Please add at least one item to the invoice.');\n      setIsLoading(false);\n      return;\n    }\n    if (items.some(item => !item.item || !item.quantity || !item.price)) {\n      setError('Please ensure all items have at least a description, quantity, and price.');\n      setIsLoading(false);\n      return;\n    }\n\n    // Prepare payload for the API\n    const invoicePayload = {\n      customer_id: parseInt(customerId, 10),\n      date: invoiceDate,\n      total: total,\n      // Map items, excluding the temporary frontend `id` and ensuring correct types\n      items: items.map(({\n        id,\n        ...rest\n      }) => ({\n        ...rest,\n        quantity: parseFloat(rest.quantity) || 0,\n        price: parseFloat(rest.price) || 0,\n        amount: parseFloat(rest.amount) || 0,\n        weight: rest.weight ? parseFloat(rest.weight) : null // Handle optional weight\n      })),\n      // Default statuses - assuming new invoices are active but not paid/completed yet\n      checked_out: false,\n      paid: false,\n      completed: false\n    };\n    try {\n      let response;\n      let responseData;\n      if (isEditing) {\n        // TODO: Implement Update logic\n        console.log(`UPDATING Invoice ${orderId}:`, invoicePayload);\n        setError(\"Updating invoices is not yet implemented.\");\n        // response = await fetch(`${API_BASE_URL}/orders/${orderId}`, {\n        //     method: 'PUT',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(invoicePayload),\n        // });\n        // if (!response.ok) throw new Error('Failed to update invoice');\n        // responseData = await response.json();\n        // setSuccessMessage(`Invoice #${responseData.id} updated successfully!`);\n      } else {\n        console.log(\"SAVING New Invoice:\", invoicePayload);\n        response = await fetch(`${API_BASE_URL}/orders`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(invoicePayload)\n        });\n        if (!response.ok) {\n          const errorBody = await response.text();\n          console.error(\"API Error Response:\", errorBody);\n          throw new Error(`Failed to create invoice. Status: ${response.status} ${response.statusText}`);\n        }\n        responseData = await response.json();\n        setSuccessMessage(`Invoice #${responseData.id} created successfully!`);\n        setInvoiceNumber(responseData.id); // Update displayed invoice number\n        // Optionally redirect after a short delay\n        setTimeout(() => navigate('/orders'), 2000); // Redirect to active orders after 2s\n      }\n    } catch (err) {\n      console.error(\"Error saving invoice:\", err);\n      setError(err.message || 'An unexpected error occurred while saving the invoice.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleCancel = () => {\n    navigate('/orders'); // Navigate back to active orders\n  };\n\n  // --- Render Logic --- \n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading invoice data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 14\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red',\n          padding: '20px'\n        },\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n    pageTitle: isEditing ? `Edit Invoice #${invoiceNumber}` : 'New Invoice',\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSave,\n      className: \"invoice-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invoice-form-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isEditing ? `Edit Invoice #${invoiceNumber}` : 'New Invoice'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"invoice-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"button button-primary\",\n            disabled: isLoading,\n            children: isLoading ? 'Saving...' : 'Save Invoice'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleCancel,\n            className: \"button button-secondary\",\n            disabled: isLoading,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 19\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invoice-meta\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meta-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"customerSelect\",\n            children: \"Customer:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"customerSelect\",\n            value: customerId,\n            onChange: handleCustomerChange,\n            required: true // Make customer selection mandatory\n            ,\n            disabled: isEditing // Disable if editing for now\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"-- Select a Customer --\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 21\n            }, this), customers.map(customer => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: customer.id,\n              children: customer.name\n            }, customer.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 25\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meta-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"customerPhone\",\n            children: \"Phone:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"tel\",\n            id: \"customerPhone\",\n            value: selectedCustomer ? selectedCustomer.phone : '',\n            readOnly: true // Make phone read-only based on selected customer\n            ,\n            placeholder: \"Customer Phone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meta-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Invoice #:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 18\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"invoice-number\",\n            children: invoiceNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meta-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"invoiceDate\",\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"invoiceDate\",\n            value: invoiceDate,\n            onChange: e => setInvoiceDate(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invoice-items-section scrollable\",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"data-table invoice-items-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Quantity*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Item Description*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Weight\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Unit Price*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Notes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  width: '50px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: items.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  step: \"any\",\n                  value: item.quantity,\n                  onChange: e => handleItemChange(item.id, 'quantity', e.target.value),\n                  placeholder: \"0\",\n                  required: true,\n                  className: \"input-narrow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: item.item,\n                  onChange: e => handleItemChange(item.id, 'item', e.target.value),\n                  placeholder: \"Item description\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  step: \"any\",\n                  value: item.weight,\n                  onChange: e => handleItemChange(item.id, 'weight', e.target.value),\n                  placeholder: \"Optional\",\n                  className: \"input-narrow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  step: \"0.01\",\n                  value: item.price,\n                  onChange: e => handleItemChange(item.id, 'price', e.target.value),\n                  placeholder: \"0.00\",\n                  required: true,\n                  className: \"input-narrow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"amount-cell\",\n                children: [\"$\", (parseFloat(item.amount) || 0).toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: item.notes,\n                  onChange: e => handleItemChange(item.id, 'notes', e.target.value),\n                  placeholder: \"Optional notes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 24\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 20\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"action-cell\",\n                children: (items.length > 1 || isEditing) && /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: () => removeItemRow(item.id),\n                  className: \"icon-button danger\",\n                  title: \"Remove Item\",\n                  children: /*#__PURE__*/_jsxDEV(FaTrashAlt, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 348,\n                    columnNumber: 137\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 19\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addItemRow,\n          className: \"button add-item-button\",\n          disabled: isLoading,\n          children: [/*#__PURE__*/_jsxDEV(FaPlus, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), \" Add Item\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invoice-total\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"TOTAL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"$\", total.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n}\n_s(ManagerNewInvoice, \"RfaR7O8KouCQcowS9n+0UvEg6B4=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ManagerNewInvoice;\nexport default ManagerNewInvoice;\nvar _c;\n$RefreshReg$(_c, \"ManagerNewInvoice\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","ManagerLayout","FaPlus","FaTrashAlt","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","getFormattedDate","date","Date","toISOString","split","ManagerNewInvoice","_s","navigate","orderId","isEditing","Boolean","customerId","setCustomerId","invoiceDate","setInvoiceDate","items","setItems","total","setTotal","customers","setCustomers","selectedCustomer","setSelectedCustomer","isLoading","setIsLoading","error","setError","successMessage","setSuccessMessage","invoiceNumber","setInvoiceNumber","fetchCustomers","placeholderCustomers","id","name","phone","email","err","console","warn","now","quantity","item","weight","price","notes","amount","addItemRow","newId","Math","random","handleItemChange","field","value","prevItems","map","newItem","parseFloat","removeItemRow","filter","newTotal","reduce","sum","handleCustomerChange","event","selectedId","target","customer","find","c","parseInt","handleSave","preventDefault","length","some","invoicePayload","customer_id","rest","checked_out","paid","completed","response","responseData","log","fetch","method","headers","body","JSON","stringify","ok","errorBody","text","Error","status","statusText","json","setTimeout","message","handleCancel","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","padding","pageTitle","onSubmit","className","type","disabled","onClick","htmlFor","onChange","required","readOnly","placeholder","e","width","index","step","toFixed","title","_c","$RefreshReg$"],"sources":["/Users/christiansarmiento/Documents/GitHub/Atlas-V2/client/src/pages/ManagerNewInvoice.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ManagerLayout from '../components/ManagerLayout';\nimport { FaPlus, FaTrashAlt } from 'react-icons/fa';\nimport '../styles/InvoiceForm.css';\n\n// Base URL for the API (Consider moving this to a config file)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Function to get formatted date yyyy-mm-dd\nconst getFormattedDate = (date = new Date()) => {\n  return date.toISOString().split('T')[0];\n};\n\n// --- Removed Sample Data Fetching ---\n\nfunction ManagerNewInvoice() {\n  const navigate = useNavigate();\n  const { orderId } = useParams(); // orderId will be undefined when creating new\n  const isEditing = Boolean(orderId);\n\n  // State for form fields\n  const [customerId, setCustomerId] = useState('');\n  const [invoiceDate, setInvoiceDate] = useState(getFormattedDate());\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n\n  // State for managing related data (customers)\n  const [customers, setCustomers] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState(null);\n\n  // State for UI control\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [invoiceNumber, setInvoiceNumber] = useState(isEditing ? orderId : 'Auto-Generated'); // For display\n\n  // --- Fetch Initial Data (Customers) ---\n  useEffect(() => {\n    const fetchCustomers = async () => {\n      setIsLoading(true);\n      try {\n        // TODO: Replace with actual customer API endpoint when available\n        // const response = await fetch(`${API_BASE_URL}/customers`);\n        // if (!response.ok) throw new Error('Failed to fetch customers');\n        // const data = await response.json();\n        // setCustomers(data);\n\n        // --- Placeholder Customers --- \n        const placeholderCustomers = [\n          { id: 1, name: 'Michoacano Market', phone: '123-456-7890', email: 'micho@test.com' },\n          { id: 2, name: 'Mosner Family Brands', phone: '987-654-3210', email: 'mosner@test.com' },\n          { id: 3, name: 'Carniceria Mexicana', phone: '555-123-4567', email: 'carni@test.com' },\n          { id: 4, name: 'Tomoe Sushi', phone: '555-987-6543', email: 'tomoe@test.com' },\n        ];\n        setCustomers(placeholderCustomers);\n        // --- End Placeholder --- \n\n        setError(null);\n      } catch (err) {\n        console.error(\"Error fetching customers:\", err);\n        setError('Failed to load customer data. Please try again later.');\n        setCustomers([]); // Ensure customers is empty on error\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCustomers();\n  }, []);\n\n  // --- Fetch Order Data if Editing (Not implemented yet) ---\n  useEffect(() => {\n    if (isEditing) {\n        // TODO: Implement fetching existing order data for editing\n        console.warn(\"Edit mode not fully implemented yet. Fetching existing order data is required.\");\n        setError(\"Editing existing invoices is not yet supported.\");\n        setIsLoading(false);\n        // When implemented, fetch the order by orderId, populate customerId, invoiceDate, items, total\n        // Example fetch:\n        /*\n        const fetchOrder = async () => {\n            setIsLoading(true);\n            try {\n                const response = await fetch(`${API_BASE_URL}/orders/${orderId}`); // Need endpoint to get single order\n                if (!response.ok) throw new Error('Failed to fetch order');\n                const orderData = await response.json();\n                setCustomerId(orderData.customer_id);\n                setSelectedCustomer(customers.find(c => c.id === orderData.customer_id) || null);\n                setInvoiceDate(getFormattedDate(new Date(orderData.date)));\n                setItems(orderData.items.map(item => ({ ...item, id: item.id || Date.now() + Math.random() })) || []);\n                setTotal(orderData.total || 0);\n                setInvoiceNumber(orderData.id);\n                setError(null);\n            } catch (err) {\n                console.error(\"Error fetching order for edit:\", err);\n                setError(`Failed to load order ${orderId} for editing.`);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        if (customers.length > 0) { // Ensure customers are loaded before trying to find the selected one\n             fetchOrder();\n        }\n        */\n    } else {\n        // Start with one empty row for new invoice\n        setItems([{ id: Date.now(), quantity: '', item: '', weight: '', price: '', notes: '', amount: 0 }]);\n    }\n  }, [orderId, isEditing, customers]); // Added customers dependency for edit mode logic\n\n  // --- Item Management ---\n  const addItemRow = () => {\n    const newId = Date.now() + Math.random(); // Add randomness for better uniqueness\n    setItems([...items, { id: newId, quantity: '', item: '', weight: '', price: '', notes: '', amount: 0 }]);\n  };\n\n  const handleItemChange = (id, field, value) => {\n    setItems(prevItems => {\n      return prevItems.map(item => {\n        if (item.id === id) {\n          const newItem = { ...item, [field]: value };\n          // Recalculate amount if quantity or price changes\n          if (field === 'quantity' || field === 'price') {\n            const quantity = parseFloat(newItem.quantity) || 0;\n            const price = parseFloat(newItem.price) || 0;\n            newItem.amount = quantity * price;\n          }\n          return newItem;\n        }\n        return item;\n      });\n    });\n  };\n\n  const removeItemRow = (id) => {\n    setItems(prevItems => prevItems.filter(item => item.id !== id));\n  };\n\n  // Calculate total whenever items change\n  useEffect(() => {\n    const newTotal = items.reduce((sum, item) => {\n        const amount = parseFloat(item.amount) || 0;\n        return sum + amount;\n    }, 0);\n    setTotal(newTotal);\n  }, [items]);\n\n   // --- Customer Selection ---\n    const handleCustomerChange = (event) => {\n        const selectedId = event.target.value;\n        setCustomerId(selectedId);\n        const customer = customers.find(c => c.id === parseInt(selectedId, 10));\n        setSelectedCustomer(customer || null);\n    };\n\n  // --- Form Submission/Cancellation Handlers ---\n  const handleSave = async (event) => {\n    event.preventDefault(); // Prevent default form submission\n    setError(null); // Clear previous errors\n    setSuccessMessage(null);\n    setIsLoading(true);\n\n    // Basic Validation\n     if (!customerId) {\n       setError('Please select a customer.');\n       setIsLoading(false);\n       return;\n     }\n     if (items.length === 0) {\n         setError('Please add at least one item to the invoice.');\n         setIsLoading(false);\n         return;\n     }\n     if (items.some(item => !item.item || !item.quantity || !item.price)) {\n         setError('Please ensure all items have at least a description, quantity, and price.');\n         setIsLoading(false);\n         return;\n     }\n\n    // Prepare payload for the API\n    const invoicePayload = {\n      customer_id: parseInt(customerId, 10),\n      date: invoiceDate,\n      total: total,\n      // Map items, excluding the temporary frontend `id` and ensuring correct types\n      items: items.map(({ id, ...rest }) => ({\n          ...rest,\n          quantity: parseFloat(rest.quantity) || 0,\n          price: parseFloat(rest.price) || 0,\n          amount: parseFloat(rest.amount) || 0,\n          weight: rest.weight ? parseFloat(rest.weight) : null, // Handle optional weight\n      })),\n      // Default statuses - assuming new invoices are active but not paid/completed yet\n      checked_out: false,\n      paid: false,\n      completed: false,\n    };\n\n    try {\n        let response;\n        let responseData;\n        if (isEditing) {\n            // TODO: Implement Update logic\n            console.log(`UPDATING Invoice ${orderId}:`, invoicePayload);\n            setError(\"Updating invoices is not yet implemented.\");\n            // response = await fetch(`${API_BASE_URL}/orders/${orderId}`, {\n            //     method: 'PUT',\n            //     headers: { 'Content-Type': 'application/json' },\n            //     body: JSON.stringify(invoicePayload),\n            // });\n            // if (!response.ok) throw new Error('Failed to update invoice');\n            // responseData = await response.json();\n            // setSuccessMessage(`Invoice #${responseData.id} updated successfully!`);\n        } else {\n            console.log(\"SAVING New Invoice:\", invoicePayload);\n            response = await fetch(`${API_BASE_URL}/orders`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(invoicePayload),\n            });\n            if (!response.ok) {\n                const errorBody = await response.text();\n                console.error(\"API Error Response:\", errorBody);\n                 throw new Error(`Failed to create invoice. Status: ${response.status} ${response.statusText}`);\n            }\n            responseData = await response.json();\n            setSuccessMessage(`Invoice #${responseData.id} created successfully!`);\n            setInvoiceNumber(responseData.id); // Update displayed invoice number\n            // Optionally redirect after a short delay\n            setTimeout(() => navigate('/orders'), 2000); // Redirect to active orders after 2s\n        }\n\n\n    } catch (err) {\n        console.error(\"Error saving invoice:\", err);\n        setError(err.message || 'An unexpected error occurred while saving the invoice.');\n    } finally {\n        setIsLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    navigate('/orders'); // Navigate back to active orders\n  };\n\n  // --- Render Logic --- \n  if (isLoading) {\n      return <ManagerLayout><div>Loading invoice data...</div></ManagerLayout>;\n  }\n\n  if (error) {\n       return <ManagerLayout><div style={{ color: 'red', padding: '20px' }}>Error: {error}</div></ManagerLayout>;\n  }\n\n  return (\n    <ManagerLayout pageTitle={isEditing ? `Edit Invoice #${invoiceNumber}` : 'New Invoice'}>\n      <form onSubmit={handleSave} className=\"invoice-form-container\">\n        <div className=\"invoice-form-header\">\n          <h2>{isEditing ? `Edit Invoice #${invoiceNumber}` : 'New Invoice'}</h2>\n          <div className=\"invoice-actions\">\n            {/* Disable save button while loading */}\n            <button type=\"submit\" className=\"button button-primary\" disabled={isLoading}>\n              {isLoading ? 'Saving...' : 'Save Invoice'}\n            </button>\n            <button type=\"button\" onClick={handleCancel} className=\"button button-secondary\" disabled={isLoading}>\n              Cancel\n            </button>\n          </div>\n        </div>\n\n        {/* Display Loading/Error/Success Messages */}\n        {isLoading && <div className=\"loading-indicator\">Loading...</div>}\n        {error && <div className=\"error-message\">Error: {error}</div>}\n        {successMessage && <div className=\"success-message\">{successMessage}</div>}\n\n        {/* Invoice Header Fields */}\n        <div className=\"invoice-meta\">\n            <div className=\"meta-item\">\n                <label htmlFor=\"customerSelect\">Customer:</label>\n                <select\n                    id=\"customerSelect\"\n                    value={customerId}\n                    onChange={handleCustomerChange}\n                    required // Make customer selection mandatory\n                    disabled={isEditing} // Disable if editing for now\n                >\n                    <option value=\"\" disabled>-- Select a Customer --</option>\n                    {customers.map(customer => (\n                        <option key={customer.id} value={customer.id}>\n                            {customer.name}\n                        </option>\n                    ))}\n                </select>\n            </div>\n            <div className=\"meta-item\">\n                <label htmlFor=\"customerPhone\">Phone:</label>\n                <input\n                    type=\"tel\"\n                    id=\"customerPhone\"\n                    value={selectedCustomer ? selectedCustomer.phone : ''}\n                    readOnly // Make phone read-only based on selected customer\n                    placeholder=\"Customer Phone\"\n                />\n            </div>\n             <div className=\"meta-item\">\n                 <label>Invoice #:</label>\n                 <span className=\"invoice-number\">{invoiceNumber}</span>\n             </div>\n            <div className=\"meta-item\">\n                <label htmlFor=\"invoiceDate\">Date:</label>\n                <input\n                    type=\"date\"\n                    id=\"invoiceDate\"\n                    value={invoiceDate}\n                    onChange={(e) => setInvoiceDate(e.target.value)}\n                    required\n                />\n            </div>\n        </div>\n\n        {/* Invoice Items Table */}\n        <div className=\"invoice-items-section scrollable\">\n          <table className=\"data-table invoice-items-table\">\n            <thead>\n              <tr>\n                <th>Quantity*</th>\n                <th>Item Description*</th>\n                <th>Weight</th>\n                <th>Unit Price*</th>\n                <th>Amount</th>\n                <th>Notes</th>\n                <th style={{width: '50px'}}></th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map((item, index) => (\n                <tr key={item.id}>\n                  <td><input type=\"number\" step=\"any\" value={item.quantity} onChange={(e) => handleItemChange(item.id, 'quantity', e.target.value)} placeholder=\"0\" required className=\"input-narrow\" /></td>\n                  <td><input type=\"text\" value={item.item} onChange={(e) => handleItemChange(item.id, 'item', e.target.value)} placeholder=\"Item description\" required /></td>\n                  <td><input type=\"number\" step=\"any\" value={item.weight} onChange={(e) => handleItemChange(item.id, 'weight', e.target.value)} placeholder=\"Optional\" className=\"input-narrow\" /></td>\n                  <td><input type=\"number\" step=\"0.01\" value={item.price} onChange={(e) => handleItemChange(item.id, 'price', e.target.value)} placeholder=\"0.00\" required className=\"input-narrow\"/></td>\n                  <td className=\"amount-cell\">${(parseFloat(item.amount) || 0).toFixed(2)}</td>\n                   <td><input type=\"text\" value={item.notes} onChange={(e) => handleItemChange(item.id, 'notes', e.target.value)} placeholder=\"Optional notes\" /></td>\n                  <td className=\"action-cell\">\n                    {/* Always allow removing if more than one item, or if editing */}\n                    {(items.length > 1 || isEditing) && (\n                        <button type=\"button\" onClick={() => removeItemRow(item.id)} className=\"icon-button danger\" title=\"Remove Item\"><FaTrashAlt /></button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <button type=\"button\" onClick={addItemRow} className=\"button add-item-button\" disabled={isLoading}>\n            <FaPlus /> Add Item\n          </button>\n        </div>\n\n        {/* Invoice Total */}\n        <div className=\"invoice-total\">\n          <span>TOTAL:</span>\n          <span>${total.toFixed(2)}</span>\n        </div>\n\n      </form>\n    </ManagerLayout>\n  );\n}\n\nexport default ManagerNewInvoice; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}