{"ast":null,"code":"/**\n * Converts a 24-hour time string (HH:mm) to a 12-hour AM/PM format.\n * Returns the original string if it doesn't match the format or is invalid.\n * @param {string} timeString - The time string in HH:mm format.\n * @returns {string} The formatted time string (e.g., \"05:00 PM\") or the original string.\n */\nexport const formatTimeTo12Hour = timeString => {\n  if (!timeString || typeof timeString !== 'string' || !timeString.includes(':')) {\n    return timeString; // Return original if invalid or not a time string\n  }\n  const parts = timeString.split(':');\n  const hour = parseInt(parts[0], 10);\n  const minute = parseInt(parts[1], 10);\n  if (isNaN(hour) || isNaN(minute) || hour < 0 || hour > 23 || minute < 0 || minute > 59) {\n    return timeString; // Return original if invalid time parts\n  }\n  const ampm = hour >= 12 ? 'PM' : 'AM';\n  const hour12 = hour % 12 || 12; // Convert hour to 12-hour format (0 becomes 12)\n  const minuteFormatted = minute < 10 ? `0${minute}` : minute; // Add leading zero to minutes\n  const hourFormatted = hour12 < 10 ? `0${hour12}` : hour12; // Add leading zero to hour\n\n  return `${hourFormatted}:${minuteFormatted} ${ampm}`;\n};","map":{"version":3,"names":["formatTimeTo12Hour","timeString","includes","parts","split","hour","parseInt","minute","isNaN","ampm","hour12","minuteFormatted","hourFormatted"],"sources":["/Users/christiansarmiento/Documents/GitHub/Atlas-V2/manager/client/src/utils/formatTime.js"],"sourcesContent":["/**\n * Converts a 24-hour time string (HH:mm) to a 12-hour AM/PM format.\n * Returns the original string if it doesn't match the format or is invalid.\n * @param {string} timeString - The time string in HH:mm format.\n * @returns {string} The formatted time string (e.g., \"05:00 PM\") or the original string.\n */\nexport const formatTimeTo12Hour = (timeString) => {\n  if (!timeString || typeof timeString !== 'string' || !timeString.includes(':')) {\n    return timeString; // Return original if invalid or not a time string\n  }\n\n  const parts = timeString.split(':');\n  const hour = parseInt(parts[0], 10);\n  const minute = parseInt(parts[1], 10);\n\n  if (isNaN(hour) || isNaN(minute) || hour < 0 || hour > 23 || minute < 0 || minute > 59) {\n      return timeString; // Return original if invalid time parts\n  }\n\n  const ampm = hour >= 12 ? 'PM' : 'AM';\n  const hour12 = hour % 12 || 12; // Convert hour to 12-hour format (0 becomes 12)\n  const minuteFormatted = minute < 10 ? `0${minute}` : minute; // Add leading zero to minutes\n  const hourFormatted = hour12 < 10 ? `0${hour12}` : hour12; // Add leading zero to hour\n\n  return `${hourFormatted}:${minuteFormatted} ${ampm}`;\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAIC,UAAU,IAAK;EAChD,IAAI,CAACA,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,IAAI,CAACA,UAAU,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC9E,OAAOD,UAAU,CAAC,CAAC;EACrB;EAEA,MAAME,KAAK,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;EACnC,MAAMC,IAAI,GAAGC,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACnC,MAAMI,MAAM,GAAGD,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EAErC,IAAIK,KAAK,CAACH,IAAI,CAAC,IAAIG,KAAK,CAACD,MAAM,CAAC,IAAIF,IAAI,GAAG,CAAC,IAAIA,IAAI,GAAG,EAAE,IAAIE,MAAM,GAAG,CAAC,IAAIA,MAAM,GAAG,EAAE,EAAE;IACpF,OAAON,UAAU,CAAC,CAAC;EACvB;EAEA,MAAMQ,IAAI,GAAGJ,IAAI,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;EACrC,MAAMK,MAAM,GAAGL,IAAI,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;EAChC,MAAMM,eAAe,GAAGJ,MAAM,GAAG,EAAE,GAAG,IAAIA,MAAM,EAAE,GAAGA,MAAM,CAAC,CAAC;EAC7D,MAAMK,aAAa,GAAGF,MAAM,GAAG,EAAE,GAAG,IAAIA,MAAM,EAAE,GAAGA,MAAM,CAAC,CAAC;;EAE3D,OAAO,GAAGE,aAAa,IAAID,eAAe,IAAIF,IAAI,EAAE;AACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}