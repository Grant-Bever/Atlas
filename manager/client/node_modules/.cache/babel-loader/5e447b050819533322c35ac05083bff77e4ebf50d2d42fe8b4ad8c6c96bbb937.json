{"ast":null,"code":"var _jsxFileName = \"/Users/christiansarmiento/Documents/GitHub/Atlas-V2/manager/client/src/pages/ManagerAddEmployee.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ManagerLayout from '../components/ManagerLayout';\nimport '../styles/FormPage.css'; // Shared form styles\nimport '../styles/Modal.css'; // Use existing modal styles\n\n// Base URL for the API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// --- REMOVED Sample Data Fetching ---\n// const fetchEmployeeData = (employeeId) => { ... }; // REMOVED\n\nfunction AddEmployee() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    employeeId\n  } = useParams(); // Get employeeId from URL\n  const isEditing = Boolean(employeeId);\n\n  // Form State\n  const [employeeName, setEmployeeName] = useState('');\n  const [dateHired, setDateHired] = useState(new Date().toISOString().split('T')[0]); // Keep dateHired for now, though not in DB schema shown\n  const [hourlyWage, setHourlyWage] = useState('');\n  const [jobTitle, setJobTitle] = useState(''); // Keep jobTitle for now\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [email, setEmail] = useState('');\n\n  // Component State\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(isEditing); // Loading state for edit mode\n  const [error, setError] = useState(null); // For general/fetch errors\n  const [submitError, setSubmitError] = useState(null); // For submission errors\n\n  // Fetch data if editing\n  useEffect(() => {\n    if (isEditing) {\n      setIsLoading(true);\n      setError(null); // Clear previous errors\n      fetch(`${API_BASE_URL}/employees/${employeeId}`) // Use actual endpoint\n      .then(res => {\n        if (!res.ok) {\n          if (res.status === 404) {\n            throw new Error('Employee not found.');\n          }\n          // Try to parse error message from backend\n          return res.json().then(errData => {\n            throw new Error(errData.message || 'Failed to fetch employee data.');\n          }).catch(() => {\n            // Fallback if error parsing fails\n            throw new Error('Failed to fetch employee data.');\n          });\n        }\n        return res.json();\n      }).then(data => {\n        // Map backend fields (name, email, phone, hourly_rate) to frontend state\n        setEmployeeName(data.name || '');\n        setEmail(data.email || '');\n        setPhoneNumber(data.phone || ''); // Map phone to phoneNumber\n        setHourlyWage(data.hourly_rate !== undefined ? String(data.hourly_rate) : ''); // Map hourly_rate to hourlyWage\n        // Keep jobTitle and dateHired populated if they exist in data, though they might not be in the schema\n        setJobTitle(data.jobTitle || ''); // Assuming jobTitle might exist for editing display\n        setDateHired(data.dateHired || new Date().toISOString().split('T')[0]); // Assuming dateHired might exist\n      }).catch(err => {\n        console.error(\"Error fetching employee data:\", err);\n        setError(err.message || 'Failed to load employee data.');\n      }).finally(() => {\n        setIsLoading(false);\n      });\n    }\n  }, [employeeId, isEditing]); // Dependencies\n\n  const handleAttemptSave = e => {\n    e.preventDefault();\n    setSubmitError(null); // Clear previous submit errors\n    if (isEditing) {\n      // Skip modal if just editing existing info\n      handleConfirmSave();\n    } else {\n      // Show modal only when adding a new employee\n      setIsModalOpen(true);\n    }\n  };\n\n  // --- API Call Logic ---\n  const handleConfirmSave = async () => {\n    setIsModalOpen(false); // Close modal immediately\n\n    // Map frontend state to backend expected fields\n    const employeePayload = {\n      name: employeeName,\n      email: email,\n      phone: phoneNumber || null,\n      // Send null if empty\n      hourly_rate: parseFloat(hourlyWage) || 0\n      // --- Fields not directly in DB schema shown but present in form ---\n      // Add these ONLY if your backend API endpoint actually expects them\n      // jobTitle: jobTitle,\n      // dateHired: dateHired,\n      // --- End optional fields ---\n\n      // Add password field only when creating (assuming backend handles this)\n      // The actual password should ideally be set via the email link/setup process\n      // Or the backend should generate one if not provided\n    };\n    if (!isEditing) {\n      // A placeholder or mechanism to indicate password setup is needed\n      // Avoid sending plain text passwords if possible\n      // employeePayload.password = 'initiate_setup'; // Example indicator\n    }\n    const url = isEditing ? `${API_BASE_URL}/employees/${employeeId}` : `${API_BASE_URL}/employees`;\n    const method = isEditing ? 'PUT' : 'POST';\n    console.log(`Attempting ${method} request to ${url}`); // Debug log start\n\n    try {\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(employeePayload)\n      });\n      if (!response.ok) {\n        // Try to get more specific error message from backend response body\n        const errorData = await response.json().catch(() => ({\n          message: `Request failed with status ${response.status}`\n        }));\n        console.error('API Error Response Data:', errorData);\n        throw new Error(errorData.message || `Failed to ${isEditing ? 'update' : 'add'} employee.`);\n      }\n\n      // --- Success ---\n      const responseData = await response.json(); // Get response data (e.g., the created/updated employee)\n      console.log(`Employee ${isEditing ? 'updated' : 'added'} successfully:`, responseData);\n\n      // TODO: Potentially trigger welcome/setup email (backend might do this automatically)\n      if (!isEditing) {\n        console.log(`Setup process for ${email} should be initiated.`);\n      }\n      navigate('/employees'); // Navigate back to employee list on success\n    } catch (err) {\n      console.error(`Error saving employee (${method} ${url}):`, err);\n      setSubmitError(err.message || 'An unexpected error occurred while saving.'); // Display submit error\n    }\n  };\n  // --- End API Call Logic ---\n\n  const handleCancelSave = () => {\n    setIsModalOpen(false);\n  };\n  const handleCancelForm = () => {\n    navigate('/employees');\n  };\n\n  // --- Render Logic ---\n  if (isLoading && isEditing) {\n    return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading employee data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 14\n    }, this);\n  }\n  if (error) {\n    // Display fetch error\n    return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-error-message\",\n        children: [\"Error loading employee data: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n    pageTitle: isEditing ? `Edit Employee: ${employeeName || employeeId}` : 'Add New Employee',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-page-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAttemptSave,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-page-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: isEditing ? 'Edit Employee Details' : 'Add New Employee'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-page-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleCancelForm,\n              className: \"button button-secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"button button-primary\",\n              children: isEditing ? 'Update Employee' : 'Save Employee'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), submitError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-error-message\",\n          style: {\n            gridColumn: '1 / -1',\n            marginBottom: '1rem'\n          },\n          children: [\"Save Error: \", submitError]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"employeeName\",\n              children: \"Employee Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"employeeName\",\n              value: employeeName,\n              onChange: e => setEmployeeName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"dateHired\",\n              children: \"Date Hired\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              id: \"dateHired\",\n              value: dateHired,\n              onChange: e => setDateHired(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"hourlyWage\",\n              children: \"Hourly Rate ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              id: \"hourlyWage\",\n              value: hourlyWage,\n              onChange: e => setHourlyWage(e.target.value),\n              required: true,\n              placeholder: \"e.g., 18.50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"jobTitle\",\n              children: \"Job Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"jobTitle\",\n              value: jobTitle,\n              onChange: e => setJobTitle(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"phoneNumber\",\n              children: \"Phone Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"tel\",\n              id: \"phoneNumber\",\n              value: phoneNumber,\n              onChange: e => setPhoneNumber(e.target.value),\n              placeholder: \"(Optional)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              id: \"email\",\n              value: email,\n              onChange: e => setEmail(e.target.value),\n              required: true,\n              placeholder: \"Used for account setup\",\n              disabled: isEditing\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), !isEditing && isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Confirm Employee Addition\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Proceed with adding this employee? They may need to set up their account via email.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCancelSave,\n            className: \"button button-secondary\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleConfirmSave,\n            className: \"button button-primary\",\n            children: \"Confirm & Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(AddEmployee, \"dFZzKxGRpSlKi2GhLym1wL3MkV8=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = AddEmployee;\nexport default AddEmployee;\nvar _c;\n$RefreshReg$(_c, \"AddEmployee\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","ManagerLayout","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","AddEmployee","_s","navigate","employeeId","isEditing","Boolean","employeeName","setEmployeeName","dateHired","setDateHired","Date","toISOString","split","hourlyWage","setHourlyWage","jobTitle","setJobTitle","phoneNumber","setPhoneNumber","email","setEmail","isModalOpen","setIsModalOpen","isLoading","setIsLoading","error","setError","submitError","setSubmitError","fetch","then","res","ok","status","Error","json","errData","message","catch","data","name","phone","hourly_rate","undefined","String","err","console","finally","handleAttemptSave","e","preventDefault","handleConfirmSave","employeePayload","parseFloat","url","method","log","response","headers","body","JSON","stringify","errorData","responseData","handleCancelSave","handleCancelForm","children","fileName","_jsxFileName","lineNumber","columnNumber","className","pageTitle","onSubmit","type","onClick","style","gridColumn","marginBottom","htmlFor","id","value","onChange","target","required","step","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/christiansarmiento/Documents/GitHub/Atlas-V2/manager/client/src/pages/ManagerAddEmployee.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ManagerLayout from '../components/ManagerLayout';\nimport '../styles/FormPage.css'; // Shared form styles\nimport '../styles/Modal.css';  // Use existing modal styles\n\n// Base URL for the API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// --- REMOVED Sample Data Fetching ---\n// const fetchEmployeeData = (employeeId) => { ... }; // REMOVED\n\nfunction AddEmployee() {\n  const navigate = useNavigate();\n  const { employeeId } = useParams(); // Get employeeId from URL\n  const isEditing = Boolean(employeeId);\n\n  // Form State\n  const [employeeName, setEmployeeName] = useState('');\n  const [dateHired, setDateHired] = useState(new Date().toISOString().split('T')[0]); // Keep dateHired for now, though not in DB schema shown\n  const [hourlyWage, setHourlyWage] = useState('');\n  const [jobTitle, setJobTitle] = useState(''); // Keep jobTitle for now\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [email, setEmail] = useState('');\n\n  // Component State\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(isEditing); // Loading state for edit mode\n  const [error, setError] = useState(null); // For general/fetch errors\n  const [submitError, setSubmitError] = useState(null); // For submission errors\n\n  // Fetch data if editing\n  useEffect(() => {\n    if (isEditing) {\n      setIsLoading(true);\n      setError(null); // Clear previous errors\n      fetch(`${API_BASE_URL}/employees/${employeeId}`) // Use actual endpoint\n        .then(res => {\n          if (!res.ok) {\n            if (res.status === 404) {\n              throw new Error('Employee not found.');\n            }\n            // Try to parse error message from backend\n            return res.json().then(errData => {\n                 throw new Error(errData.message || 'Failed to fetch employee data.');\n            }).catch(() => { // Fallback if error parsing fails\n                 throw new Error('Failed to fetch employee data.');\n            });\n          }\n          return res.json();\n        })\n        .then(data => {\n          // Map backend fields (name, email, phone, hourly_rate) to frontend state\n          setEmployeeName(data.name || '');\n          setEmail(data.email || '');\n          setPhoneNumber(data.phone || ''); // Map phone to phoneNumber\n          setHourlyWage(data.hourly_rate !== undefined ? String(data.hourly_rate) : ''); // Map hourly_rate to hourlyWage\n          // Keep jobTitle and dateHired populated if they exist in data, though they might not be in the schema\n          setJobTitle(data.jobTitle || ''); // Assuming jobTitle might exist for editing display\n          setDateHired(data.dateHired || new Date().toISOString().split('T')[0]); // Assuming dateHired might exist\n        })\n        .catch(err => {\n           console.error(\"Error fetching employee data:\", err);\n           setError(err.message || 'Failed to load employee data.');\n        })\n        .finally(() => {\n           setIsLoading(false);\n        });\n    }\n  }, [employeeId, isEditing]); // Dependencies\n\n  const handleAttemptSave = (e) => {\n    e.preventDefault();\n    setSubmitError(null); // Clear previous submit errors\n    if (isEditing) {\n        // Skip modal if just editing existing info\n        handleConfirmSave();\n    } else {\n        // Show modal only when adding a new employee\n        setIsModalOpen(true);\n    }\n  };\n\n  // --- API Call Logic ---\n  const handleConfirmSave = async () => {\n    setIsModalOpen(false); // Close modal immediately\n\n    // Map frontend state to backend expected fields\n    const employeePayload = {\n      name: employeeName,\n      email: email,\n      phone: phoneNumber || null, // Send null if empty\n      hourly_rate: parseFloat(hourlyWage) || 0,\n      // --- Fields not directly in DB schema shown but present in form ---\n      // Add these ONLY if your backend API endpoint actually expects them\n      // jobTitle: jobTitle,\n      // dateHired: dateHired,\n      // --- End optional fields ---\n\n      // Add password field only when creating (assuming backend handles this)\n      // The actual password should ideally be set via the email link/setup process\n      // Or the backend should generate one if not provided\n    };\n    if (!isEditing) {\n        // A placeholder or mechanism to indicate password setup is needed\n        // Avoid sending plain text passwords if possible\n        // employeePayload.password = 'initiate_setup'; // Example indicator\n    }\n\n\n    const url = isEditing ? `${API_BASE_URL}/employees/${employeeId}` : `${API_BASE_URL}/employees`;\n    const method = isEditing ? 'PUT' : 'POST';\n\n    console.log(`Attempting ${method} request to ${url}`); // Debug log start\n\n    try {\n        const response = await fetch(url, {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(employeePayload),\n        });\n\n        if (!response.ok) {\n            // Try to get more specific error message from backend response body\n            const errorData = await response.json().catch(() => ({ message: `Request failed with status ${response.status}` }));\n            console.error('API Error Response Data:', errorData);\n            throw new Error(errorData.message || `Failed to ${isEditing ? 'update' : 'add'} employee.`);\n        }\n\n        // --- Success ---\n        const responseData = await response.json(); // Get response data (e.g., the created/updated employee)\n        console.log(`Employee ${isEditing ? 'updated' : 'added'} successfully:`, responseData);\n\n        // TODO: Potentially trigger welcome/setup email (backend might do this automatically)\n        if (!isEditing) {\n          console.log(`Setup process for ${email} should be initiated.`);\n        }\n        navigate('/employees'); // Navigate back to employee list on success\n\n    } catch (err) {\n        console.error(`Error saving employee (${method} ${url}):`, err);\n        setSubmitError(err.message || 'An unexpected error occurred while saving.'); // Display submit error\n    }\n  };\n  // --- End API Call Logic ---\n\n\n  const handleCancelSave = () => {\n    setIsModalOpen(false);\n  };\n\n  const handleCancelForm = () => {\n    navigate('/employees');\n  };\n\n  // --- Render Logic ---\n   if (isLoading && isEditing) {\n      return <ManagerLayout><div>Loading employee data...</div></ManagerLayout>;\n   }\n\n   if (error) { // Display fetch error\n        return <ManagerLayout><div className=\"form-error-message\">Error loading employee data: {error}</div></ManagerLayout>;\n   }\n\n  return (\n    <ManagerLayout pageTitle={isEditing ? `Edit Employee: ${employeeName || employeeId}` : 'Add New Employee'}>\n      <div className=\"form-page-container\">\n        <form onSubmit={handleAttemptSave}>\n          <div className=\"form-page-header\">\n            <h2>{isEditing ? 'Edit Employee Details' : 'Add New Employee'}</h2>\n            <div className=\"form-page-actions\">\n              <button type=\"button\" onClick={handleCancelForm} className=\"button button-secondary\">Cancel</button>\n              <button type=\"submit\" className=\"button button-primary\">{isEditing ? 'Update Employee' : 'Save Employee'}</button>\n            </div>\n          </div>\n\n           {/* Display submission errors */}\n           {submitError && (\n             <div className=\"form-error-message\" style={{ gridColumn: '1 / -1', marginBottom: '1rem' }}>\n               Save Error: {submitError}\n             </div>\n           )}\n\n\n          {/* Form Fields */}\n          <div className=\"form-grid\">\n             <div className=\"form-field\">\n              <label htmlFor=\"employeeName\">Employee Name</label>\n              <input type=\"text\" id=\"employeeName\" value={employeeName} onChange={(e) => setEmployeeName(e.target.value)} required />\n            </div>\n             {/* Date Hired - Keep UI element for now, but may not map directly to DB */}\n            <div className=\"form-field\">\n              <label htmlFor=\"dateHired\">Date Hired</label>\n              <input type=\"date\" id=\"dateHired\" value={dateHired} onChange={(e) => setDateHired(e.target.value)} />\n            </div>\n            <div className=\"form-field\">\n              <label htmlFor=\"hourlyWage\">Hourly Rate ($)</label> {/* Changed label slightly */}\n              <input type=\"number\" step=\"0.01\" id=\"hourlyWage\" value={hourlyWage} onChange={(e) => setHourlyWage(e.target.value)} required placeholder=\"e.g., 18.50\" />\n            </div>\n             {/* Job Title - Keep UI element for now */}\n            <div className=\"form-field\">\n              <label htmlFor=\"jobTitle\">Job Title</label>\n              <input type=\"text\" id=\"jobTitle\" value={jobTitle} onChange={(e) => setJobTitle(e.target.value)} />\n            </div>\n             <div className=\"form-field\">\n              <label htmlFor=\"phoneNumber\">Phone Number</label>\n              <input type=\"tel\" id=\"phoneNumber\" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} placeholder=\"(Optional)\"/>\n            </div>\n            <div className=\"form-field\">\n              <label htmlFor=\"email\">Email Address</label>\n              {/* Email is often used as an identifier, disable editing */}\n              <input type=\"email\" id=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required placeholder=\"Used for account setup\" disabled={isEditing} />\n            </div>\n          </div>\n        </form>\n      </div>\n\n      {/* Confirmation Modal (only shown when adding new) */}\n      {!isEditing && isModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <h4>Confirm Employee Addition</h4>\n            <p>Proceed with adding this employee? They may need to set up their account via email.</p> {/* Updated text */}\n            <div className=\"modal-actions\">\n              <button onClick={handleCancelSave} className=\"button button-secondary\">Cancel</button>\n              <button onClick={handleConfirmSave} className=\"button button-primary\">Confirm & Save</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </ManagerLayout>\n  );\n}\n\nexport default AddEmployee; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}