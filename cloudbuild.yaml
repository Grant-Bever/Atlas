steps:
# === MANAGER SERVER (Backend API) ===
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-server:$COMMIT_SHA', '.', '-f', 'manager/server/Dockerfile']
  id: 'Build Manager Server'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-server:$COMMIT_SHA']
  id: 'Push Manager Server'

# === Run Database Migrations ===
- name: 'gcr.io/google-appengine/exec-wrapper' # Helper to run proxy & commands
  id: 'Run Migrations'
  args:
  - '-i' # Image to run commands in
  - 'gcr.io/google.com/cloudsdktool/cloud-sdk' # Base image with gcloud
  - '-s' # Cloud SQL Instance Connection Name (passed to proxy)
  - '$_DB_INSTANCE_CONNECTION_NAME'
  - '--' # Separator for commands to run
  - 'bash'
  - '-c'
  - |
    set -e # Exit immediately if a command exits with a non-zero status.
    
    # Install Node.js and npm
    echo "Installing Node.js and npm..."
    apt-get update -y && apt-get install -y curl
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt-get install -y nodejs
    echo "Node.js and npm installed successfully."
    echo "Node version: $(node -v), NPM version: $(npm -v), NPX version: $(npx -v)"
    
    # Check workspace content before changing directory
    echo "Current directory before cd: $(pwd)"
    echo "Listing /workspace contents:"
    ls -la /workspace
    
    # Detailed check before cd manager/server
    echo "Preparing to change to /workspace/manager/server directory..."
    echo "Checking existence and permissions of /workspace/manager:"
    ls -ld /workspace/manager || echo "/workspace/manager not found or inaccessible"
    echo "Checking existence and permissions of /workspace/manager/server:"
    ls -ld /workspace/manager/server || echo "/workspace/manager/server not found or inaccessible"

    echo "Attempting: cd /workspace/manager/server"
    cd /workspace/manager/server # Use absolute path
    echo "Successfully changed to $(pwd)"
    echo "Listing current directory contents:"
    ls -la .
    
    # Install Node.js dependencies for the server project using npm ci
    echo "Installing server dependencies using npm ci..."
    npm ci
    echo "Dependencies installed."
    
    # Run direct database connection test first
    echo "Running direct database connection test..."
    gcloud secrets versions access latest --secret="db-password" --project="$PROJECT_ID" > /tmp/db_password.txt
    echo "Password file stats:"
    wc -c /tmp/db_password.txt | awk '{print "  Length: " $1 " bytes"}'
    echo "First 1 character: $(head -c 1 /tmp/db_password.txt | xxd -p)"
    echo "Testing connection with simple pg client..."
    DB_USER="postgres" DB_NAME="atlas-db" DB_HOST="/cloudsql/$_DB_INSTANCE_CONNECTION_NAME" DB_PASS="$(cat /tmp/db_password.txt)" node db-test.js
    echo "Database test complete."
    
    # Only run migrations if connection test passes (the above should exit on failure due to set -e)
    echo "Running migrations with direct config..."
    # Create a temporary sequelize config JavaScript file that properly uses environment variables
    echo "module.exports = {" > /tmp/sequelize-config.js
    echo "  production: {" >> /tmp/sequelize-config.js
    echo "    username: process.env.DB_USER," >> /tmp/sequelize-config.js
    echo "    password: process.env.DB_PASS," >> /tmp/sequelize-config.js
    echo "    database: process.env.DB_NAME," >> /tmp/sequelize-config.js
    echo "    host: process.env.DB_HOST," >> /tmp/sequelize-config.js
    echo "    dialect: 'postgres'," >> /tmp/sequelize-config.js
    echo "    dialectOptions: {" >> /tmp/sequelize-config.js
    echo "      ssl: false" >> /tmp/sequelize-config.js
    echo "    }" >> /tmp/sequelize-config.js
    echo "  }" >> /tmp/sequelize-config.js
    echo "};" >> /tmp/sequelize-config.js
    # Run migrations using the temporary config file
    DB_USER="postgres" DB_NAME="atlas-db" DB_HOST="/cloudsql/$_DB_INSTANCE_CONNECTION_NAME" DB_PASS="$(cat /tmp/db_password.txt)" npx sequelize-cli db:migrate --config /tmp/sequelize-config.js --env production
    echo "Migrations complete."

# === Deploy Manager Server to Cloud Run ===
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'manager-server' # Cloud Run service name
    - '--image=$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-server:$COMMIT_SHA'
    - '--region=$_DEPLOY_REGION'
    - '--platform=managed'
    - '--quiet'
    - '--allow-unauthenticated' # Or configure IAM for authentication
    - '--set-cloudsql-instances=$_DB_INSTANCE_CONNECTION_NAME' # Add your DB instance connection name
    # Set environment variables, excluding DB_PASS (it will come from Secret Manager)
    - '--update-env-vars=DB_USER=$_DB_USER,DB_NAME=$_DB_NAME,DB_HOST=/cloudsql/$_DB_INSTANCE_CONNECTION_NAME' 
    # Mount the DB password from Secret Manager into the DB_PASS environment variable
    - '--set-secrets=DB_PASS=db-password:latest' 
    - '--service-account=$_SERVICE_ACCOUNT_EMAIL' # Recommended: Use a dedicated service account
    - '--port=3002' # Port your manager-server listens on, ensure Dockerfile EXPOSEs it
  id: 'Deploy Manager Server'
  waitFor: ['Run Migrations'] # Wait for migrations to complete

# === CUSTOMER CLIENT (Frontend) ===
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/customer-client:$COMMIT_SHA',
    '--build-arg', 'REACT_APP_OPENAI_API_KEY=${_OPENAI_API_KEY}',
    '--build-arg', 'REACT_APP_TAVILY_API_KEY=${_TAVILY_API_KEY}',
    './customer/customer'
  ]
  id: 'Build Customer Client'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/customer-client:$COMMIT_SHA']
  id: 'Push Customer Client'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'customer-client' # Cloud Run service name
    - '--image=$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/customer-client:$COMMIT_SHA'
    - '--region=$_DEPLOY_REGION'
    - '--platform=managed'
    - '--quiet'
    - '--allow-unauthenticated'
    - '--port=80' # Nginx default port, ensure Dockerfile EXPOSEs it
    - '--service-account=$_SERVICE_ACCOUNT_EMAIL' # Recommended
  id: 'Deploy Customer Client'

# === MANAGER CLIENT (Frontend) ===
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-client:$COMMIT_SHA', './manager/client']
  id: 'Build Manager Client'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-client:$COMMIT_SHA']
  id: 'Push Manager Client'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'manager-client' # Cloud Run service name
    - '--image=$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-client:$COMMIT_SHA'
    - '--region=$_DEPLOY_REGION'
    - '--platform=managed'
    - '--quiet'
    - '--allow-unauthenticated'
    - '--port=80' # Nginx default port
    - '--service-account=$_SERVICE_ACCOUNT_EMAIL' # Recommended
  id: 'Deploy Manager Client'

# === EMPLOYEE CLIENT (Frontend) ===
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/employee-client:$COMMIT_SHA',
    '--build-arg', 'REACT_APP_API_BASE_URL=${https://manager-server-671804272646.us-east1.run.app}',
    './employee/client'
  ]
  id: 'Build Employee Client'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/employee-client:$COMMIT_SHA']
  id: 'Push Employee Client'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'employee-client' # Cloud Run service name
    - '--image=$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/employee-client:$COMMIT_SHA'
    - '--region=$_DEPLOY_REGION'
    - '--platform=managed'
    - '--quiet'
    - '--allow-unauthenticated'
    - '--port=80' # Nginx default port
    - '--service-account=$_SERVICE_ACCOUNT_EMAIL' # Recommended
  id: 'Deploy Employee Client'

# === Database Migration Step ===
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  waitFor: ['Build Manager Server']

images:
- '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-server:$COMMIT_SHA'
- '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/customer-client:$COMMIT_SHA'
- '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-client:$COMMIT_SHA'
- '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/employee-client:$COMMIT_SHA'

# Substitutions - Define these in your Cloud Build trigger or when running the build manually
substitutions:
  _AR_HOSTNAME: 'us-east1-docker.pkg.dev' # Updated based on region
  _AR_REPO: 'atlas-repo' # Your repo name
  _DEPLOY_REGION: 'us-east1'   # Your region
  _DB_INSTANCE_CONNECTION_NAME: 'atlas-planner:us-east1:atlas-db' # Your Cloud SQL instance connection name
  _DB_USER: 'postgres' # Your database user
  # _DB_PASS: is now handled by Secret Manager in the deploy step above
  _DB_NAME: 'atlas-db' # Your database name
  _SERVICE_ACCOUNT_EMAIL: 'cloud-run-executor@atlas-planner.iam.gserviceaccount.com' # Your Cloud Run service account
  _MANAGER_SERVER_URL: 'https://manager-server-671804272646.us-east1.run.app' # Using actual manager server URL
  _OPENAI_API_KEY: 'your_openai_api_key_secret_name_or_value' # Placeholder for OpenAI API Key
  _TAVILY_API_KEY: 'your_tavily_api_key_secret_name_or_value' # Placeholder for Tavily API Key

options:
  logging: CLOUD_LOGGING_ONLY
