steps:
# === MANAGER SERVER (Backend API) ===
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-server:$COMMIT_SHA', '.', '-f', 'manager/server/Dockerfile']
  id: 'Build Manager Server'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-server:$COMMIT_SHA']
  id: 'Push Manager Server'

# === Run Database Migrations ===
- name: 'gcr.io/google-appengine/exec-wrapper' # Helper to run proxy & commands
  id: 'Run Migrations'
  args:
  - '-i' # Image to run commands in
  - 'gcr.io/google.com/cloudsdktool/cloud-sdk' # Base image with gcloud
  - '-s' # Cloud SQL Instance Connection Name (passed to proxy)
  - '$_DB_INSTANCE_CONNECTION_NAME'
  - '--' # Separator for commands to run
  - 'bash'
  - '-c'
  - |
    # Install Node.js and npm (common way for Debian-based images like cloud-sdk)
    apt-get update -y && \
    apt-get install -y curl && \
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    echo "Node.js and npm installed." && \
    node -v && \
    npm -v && \
    
    # Fetch the database password from Secret Manager and export it
    export DB_PASS=$(gcloud secrets versions access latest --secret="db-password" --project="$PROJECT_ID") && \
    
    # List current directory content for debugging
    echo "Listing /workspace content:" && \
    ls -la && \
    
    # Navigate to the server directory (this is correct as exec-wrapper checks out the repo root)
    cd manager/server && \
    echo "Current directory: $(pwd)" && \
    ls -la && \
    
    # Install Node.js dependencies for the server project
    npm ci && \
    
    # Run migrations using production config (needs env vars)
    echo "Running migrations... DB_USER:$_DB_USER, DB_NAME:$_DB_NAME, DB_HOST:/cloudsql/$_DB_INSTANCE_CONNECTION_NAME" && \
    # The DB_PASS is now available as an environment variable for sequelize-cli
    npx sequelize-cli db:migrate --env production && \
    echo "Migrations complete."
  env:
    - 'DB_USER=$_DB_USER'
    - 'DB_NAME=$_DB_NAME'
    - 'DB_HOST=/cloudsql/$_DB_INSTANCE_CONNECTION_NAME'
    # DB_PASS is now set directly in the script via gcloud secrets

# === Deploy Manager Server to Cloud Run ===
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'manager-server' # Cloud Run service name
    - '--image=$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-server:$COMMIT_SHA'
    - '--region=$_DEPLOY_REGION'
    - '--platform=managed'
    - '--quiet'
    - '--allow-unauthenticated' # Or configure IAM for authentication
    - '--set-cloudsql-instances=$_DB_INSTANCE_CONNECTION_NAME' # Add your DB instance connection name
    # Set environment variables, excluding DB_PASS (it will come from Secret Manager)
    - '--update-env-vars=DB_USER=$_DB_USER,DB_NAME=$_DB_NAME,DB_HOST=/cloudsql/$_DB_INSTANCE_CONNECTION_NAME' 
    # Mount the DB password from Secret Manager into the DB_PASS environment variable
    - '--set-secrets=DB_PASS=db-password:latest' 
    - '--service-account=$_SERVICE_ACCOUNT_EMAIL' # Recommended: Use a dedicated service account
    - '--port=3002' # Port your manager-server listens on, ensure Dockerfile EXPOSEs it
  id: 'Deploy Manager Server'

# === CUSTOMER CLIENT (Frontend) ===
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/customer-client:$COMMIT_SHA', './customer/customer']
  id: 'Build Customer Client'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/customer-client:$COMMIT_SHA']
  id: 'Push Customer Client'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'customer-client' # Cloud Run service name
    - '--image=$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/customer-client:$COMMIT_SHA'
    - '--region=$_DEPLOY_REGION'
    - '--platform=managed'
    - '--quiet'
    - '--allow-unauthenticated'
    - '--port=80' # Nginx default port, ensure Dockerfile EXPOSEs it
    - '--service-account=$_SERVICE_ACCOUNT_EMAIL' # Recommended
  id: 'Deploy Customer Client'

# === MANAGER CLIENT (Frontend) ===
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-client:$COMMIT_SHA', './manager/client']
  id: 'Build Manager Client'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-client:$COMMIT_SHA']
  id: 'Push Manager Client'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'manager-client' # Cloud Run service name
    - '--image=$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-client:$COMMIT_SHA'
    - '--region=$_DEPLOY_REGION'
    - '--platform=managed'
    - '--quiet'
    - '--allow-unauthenticated'
    - '--port=80' # Nginx default port
    - '--service-account=$_SERVICE_ACCOUNT_EMAIL' # Recommended
  id: 'Deploy Manager Client'

# === EMPLOYEE CLIENT (Frontend) ===
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/employee-client:$COMMIT_SHA', './employee/client']
  id: 'Build Employee Client'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/employee-client:$COMMIT_SHA']
  id: 'Push Employee Client'

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'employee-client' # Cloud Run service name
    - '--image=$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/employee-client:$COMMIT_SHA'
    - '--region=$_DEPLOY_REGION'
    - '--platform=managed'
    - '--quiet'
    - '--allow-unauthenticated'
    - '--port=80' # Nginx default port
    - '--service-account=$_SERVICE_ACCOUNT_EMAIL' # Recommended
  id: 'Deploy Employee Client'

# === Database Migration Step ===
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'db-migrate'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -e # Exit immediately if a command exits with a non-zero status.
      
      echo "Starting database migration step..."
      
      # Install Node.js and npm
      echo "Installing Node.js and npm..."
      apt-get update -y && apt-get install -y nodejs npm
      echo "Node.js and npm installed successfully."
      echo "Node version: $(node -v), NPM version: $(npm -v), NPX version: $(npx -v)"
      
      # Navigate to workspace and list contents
      echo "Changing to /workspace directory..."
      cd /workspace
      echo "Current directory: $(pwd)"
      echo "Listing /workspace contents:"
      ls -la /workspace
      
      # Fetch secret
      echo "Fetching database password from Secret Manager..."
      gcloud secrets versions access latest --secret="db-password" --project="$PROJECT_ID" > /tmp/db_password.txt
      export DB_PASS=$(cat /tmp/db_password.txt)
      echo "Database password fetched."
      
      # Navigate to server directory, install CLI and run migrations
      echo "Changing to manager/server directory..."
      cd manager/server
      echo "Current directory: $(pwd)"
      echo "Listing manager/server contents:"
      ls -la .
      
      echo "Installing sequelize-cli locally..."
      npm install sequelize-cli
      echo "sequelize-cli installed."
      
      echo "Running migrations..."
      npx sequelize-cli db:migrate --env production
      echo "Migrations completed successfully."
  waitFor: ['Build Manager Server']

images:
- '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-server:$COMMIT_SHA'
- '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/customer-client:$COMMIT_SHA'
- '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/manager-client:$COMMIT_SHA'
- '$_AR_HOSTNAME/$PROJECT_ID/$_AR_REPO/employee-client:$COMMIT_SHA'

# Substitutions - Define these in your Cloud Build trigger or when running the build manually
substitutions:
  _AR_HOSTNAME: 'us-east1-docker.pkg.dev' # Updated based on region
  _AR_REPO: 'atlas-repo' # Your repo name
  _DEPLOY_REGION: 'us-east1'   # Your region
  _DB_INSTANCE_CONNECTION_NAME: 'atlas-planner:us-east1:atlas-db' # Your Cloud SQL instance connection name
  _DB_USER: 'postgres' # Your database user
  # _DB_PASS: is now handled by Secret Manager in the deploy step above
  _DB_NAME: 'atlas-db' # Your database name
  _SERVICE_ACCOUNT_EMAIL: 'cloud-run-executor@atlas-planner.iam.gserviceaccount.com' # Your Cloud Run service account

options:
  logging: CLOUD_LOGGING_ONLY
