Initial file directory prompt (Christian):

Help me plan out the file directory real quick. I am making an app that is supposed to be a business manager app. This is the following pertinent info:

Manager Role
Has access to the following pages:
Active/Past Orders (separate pages)
Active Orders shows orders that need to be completed (regular invoice format, populated by Customers, marking as completed should let the customer know it is done and upon paying, should put the completed invoice in Past Orders page) 
Past Orders holds completed invoices, only seen by the Manager
Manager & employees should be allowed to manually create an invoice (in the event that a customer has called/didnt use the app interface to put in an order) 
Employees
Each card element is one employee, should be a table of days of the week, and should nicely display the hours worked. Hours worked can be submitted by Employees, and hours must be approved by a Manager
Should display the amount made (so far) for the week. Timesheets should be reset automatically at the end of the week (or when employees are paid, there should be functionality to be able to mark that some has been paid)
Ability to add/remove employees and to set their pay
Customers
Each card is one customer
Each card should display the total spent per day and per week
In settings (or in a sub-page of this page), you should be able to see all-time totals per customer
Should somehow display that an order(s) is active 
Should be able to filter individual and business customers
Inventory
Custom inventory items, there should be set categories of what kind of item it is (beef, poultry, etc) with the categories also having the ability to be custom, inventory items can be selected by customers
Inventory counts should be automatically updated as orders are paid for
Manager should be able to update inventory counts if new inventory has been purchased
Employee Role
Has the following pages:
Read-only access to Active Orders and Inventory pages
Clock in-Out
Displays calendar where employees can input hours for any given day per week (resets weekly/once an employee is paid/end of pay period)
Timesheet must be approved by a Manager 
Customer Role
Two Types of sub-roles:
Individual Customer
Landing page is read-only access to Inventory page (modified for customer view)
Cart to be able to add products (with a page/popup to see the current cart)
Checkout with Stripe 
Upon checking out and paying, an invoice is created that is given to the customer and to the Active Invoice page in the Manager/Employee view. Customer should get a notification that the order has been confirmed, Manager/Employee should get a notification that a new order has been submitted 
Upon having an active order completed, the Customer should receive a notification informing them, and the Manager should be notified that they were notified
Business Customer
Everything that the individual customer has with added functionality for recurring orders (possibly even a different inventory page if prices are different in bulk)

Set up the file directory following best practices. I have already make a client and server directory to get you started. Keep in mind that this is supposed to be a web app and that it is to use react as a frontend frame work (with html, js, and css) and nodejs for the backend. Do not write any code for anything yet, just make the file directories. 

Manager - Active Orders Page (Christian):

Okay, let's start with the manager view. Using React, create the active orders page. Title the file "managerActiveOrders.{appropriate_file_extension}" This page (and every other page within the manager view) should have a sidebar on the left that has the following items/buttons to other pages: "Orders", "Employees", "Customers", "Inventory" and "Settings". The settings button should be towards the bottom while the others should be towards the top of the sidebar. As for the actual active orders page, this should hold a table that has the following columns: "Invoice #", "Customer", "Date", "Total". This is a preliminary table, we will refine it later. The date should always be displayed at the top right. See the image as a reference to what it should look like. It would use the same colors for the app theme as well. Use best practices when coding and always use camelCase for naming conventions. Make it so that i can display the webpage to be able to see the output. Configure any packages that are needed as well. 

Manager - Active Orders Page Table Functionality (Christian):

Let's add some functionality to the table in the @ManagerActiveOrders.jsx page. I want to make it so that each row of the table is a clickable element that when clicked, shows a nested table that reveals more information, specifically with the following data members: "Quantity", "Description", "Weight", "Price", "Amount". The nested table should be made collapsable so it can be open and closed at any time, for any row in the table. Look at the attached image for a visual reference. Use best practices when coding and follow the style and naming conventions that are already in place. 

Manager - Adding a Invoice as a Manager (Christian):

When the plus button is clicked in the @ManagerActiveOrders.jsx page (<button className="icon-button"><FaPlus /></button>), this should take the user to a new page that allows the user to input a new invoice. The attached image is the FORM of what it should look like. Stylistically, it should follow the same theme as the app, but it should still look like it is an invoice sheet. The header (where there is the name (customer), invoice number, and date) should also store the customer phone number in addition to those other data members in the header. The main body of the invoice should reflect what is displayed in the main table ("Quantity", "Description", "Weight", "Price", "Amount"). The total should automatically be summed as items are added. There should always be another row to add items, make the main body of the invoice a scrollable element. There should also be a button at the top right under the date of the header (of the app, not the invoice) where the user can either save or cancel and go back to the active orders page. Use best practices when coding. 

Manager - Customer Totals Cards (Christian):

Lets work on the @ManagerTotals.jsx page. This page is supposed to hold the weekly totals for each customer, broken down by day. Each customer will belong to one card. The card consists of two columns, the weekday and then the total for that day, monday-sunday. At the bottom, the weekly total for the customer should be displayed. in the header, the weekly gross revenue is displayed at the top by summing up all of the weekly totals. The user should automatically see these cards when visiting this page since the cards should automatically be constructed using the invoice data in the Orders page. Only focus on making the cards. As mentioned, thse should only be visible if there is already invoice data in the Orders page, so make some fake data so that we can see the cards. Use best practices when coding. 

Manager - Employee Cards (Christian):

Lets work on the @ManagerTotals.jsx page. This page is supposed to hold the weekly totals for each customer, broken down by day. Each customer will belong to one card. The card consists of two columns, the weekday and then the total for that day, monday-sunday. At the bottom, the weekly total for the customer should be displayed. in the header, the weekly gross revenue is displayed at the top by summing up all of the weekly totals. The user should automatically see these cards when visiting this page since the cards should automatically be constructed using the invoice data in the Orders page. Only focus on making the cards. As mentioned, thse should only be visible if there is already invoice data in the Orders page, so make some fake data so that we can see the cards. Use best practices when coding. 

Manager - Inventory (Christian):

Okay, let's focus on the @ManagerInventory.jsx page now. The first image given is a draft of what the main page there should look like. Each row is a dropdown menu for a bigger category (Beef, Poultry, Pork, Etc.). These bigger categories can be made by the user when adding a new item (more on that later). When the category name is clicked, it opens up a dropdown menu that holds the different items that belongs to that category. As a small card, it should hold the name of the item and under that the quantity that is available. This should be true for each category. The card should have three vertical dots in the corner that allows the user to edit,  delete, or add to the item. Editing the item should bring the user back to the original page that allowed them to add the item where they can see the data members such as the name, quantity, price/pound, and item type. The  information that was originally inputted should show back up when the edit button is clicked. The second image provided shows the page for adding an item to the inventory. The user can input a name (anything as a string), select an item type (our bigger category such as beef, poultry, etc.), the quantity to be added, and the price per pound. Under this little form , there should be two buttons that allows the user to confirm or cancel. For the item type, this is a drop down list of categories that can be selected, not a text box. Out of the ones that currently exist, the user should also have the option to make a new category at anytime by having a "+ Add Category" button under the last available category from the dropdown. All the other inputs are text boxes. Use best practices when coding and keep the styling consistent with the current app. 

App Database Design (Christian):

Define my database schema for this application. The databse to be used is Postgres SQL. Here is the ER diagram:

Database Tables
- Employees: id, email, phone, name, password, hourly_rate
- Workdays: id, clock_in, clock_out, date, daily pay (FK: employee_id, timesheet_id)
- Timesheets: id, status, start_date, end_date (FK: manager_id)
- Manager: id, name, email, phone, password
- Inventory: id, price_per_pound, name, category, quantity, price_per_box (FK: manager_id)
- Customer: id, name, email, phone, password
- Invoices: id, total, date, checked_out, paid, completed (FK: customer_id)
- Invoice_Items: id, quantity, notes, amount, price, weight, item (FK: invoice_id)

Database Relationships
- Employees-work-Workdays: 1:M
- Workdays-record-Timesheets: M:1
- Timesheets-approve-Managers: M:1
- Managers-manage-Inventory: 1:M
- Invoices-make-Customers: M:1
- Invoices-hold-Invoice_Items: 1:M

Define any code for the database within a folder called "database" that should be stored within the /server folder within the codebase. Make this folder if it does not already exist. Follow best practices.