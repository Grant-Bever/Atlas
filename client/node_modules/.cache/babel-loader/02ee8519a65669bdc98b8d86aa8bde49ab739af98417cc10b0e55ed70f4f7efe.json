{"ast":null,"code":"var _jsxFileName = \"/Users/christiansarmiento/Documents/GitHub/Atlas-V2/client/src/pages/AddInventoryItem.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ManagerLayout from '../components/ManagerLayout';\nimport '../styles/FormPage.css'; // Shared form styles\n\n// Base URL for the API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// --- Sample Data Fetching (Replace with actual API calls) ---\nconst fetchInventoryItemData = itemId => {\n  console.log(\"Fetching data for item ID:\", itemId);\n  // Simulate finding item data\n  const allItems = [{\n    id: 'b1',\n    name: 'Ribeye',\n    quantity: 25,\n    pricePerPound: 12.99,\n    category: 'Beef'\n  }, {\n    id: 'p1',\n    name: 'Chicken Breast',\n    quantity: 80,\n    pricePerPound: 3.99,\n    category: 'Poultry'\n  }\n  // ... other items\n  ];\n  const foundItem = allItems.find(item => item.id === itemId);\n  return foundItem ? Promise.resolve(foundItem) : Promise.resolve(null);\n};\nconst fetchCategories = () => {\n  // Simulate fetching existing categories\n  return Promise.resolve(['Beef', 'Poultry', 'Pork', 'Miscellaneous']);\n};\n// --- End Sample Data Fetching ---\n\nconst ADD_NEW_CATEGORY_VALUE = '__add_new__';\nfunction AddInventoryItem() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    itemId\n  } = useParams();\n  const isEditing = Boolean(itemId);\n\n  // Form State\n  const [itemName, setItemName] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [pricePerPound, setPricePerPound] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState(''); // Holds the value from dropdown\n  const [newCategoryName, setNewCategoryName] = useState('');\n  const [showNewCategoryInput, setShowNewCategoryInput] = useState(false);\n\n  // Data State\n  const [existingCategories, setExistingCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch categories and item data (if editing)\n  useEffect(() => {\n    setIsLoading(true);\n    Promise.all([fetchCategories(), isEditing ? fetchInventoryItemData(itemId) : Promise.resolve(null)]).then(([categories, itemData]) => {\n      setExistingCategories(categories || []);\n      if (isEditing) {\n        if (itemData) {\n          setItemName(itemData.name || '');\n          setQuantity(itemData.quantity !== undefined ? String(itemData.quantity) : '');\n          setPricePerPound(itemData.pricePerPound !== undefined ? String(itemData.pricePerPound) : '');\n          // Ensure the item's category is selected, even if it was newly created before\n          if (itemData.category && !categories.includes(itemData.category)) {\n            setExistingCategories(prev => [...prev, itemData.category]);\n          }\n          setSelectedCategory(itemData.category || '');\n        } else {\n          setError('Inventory item not found.');\n        }\n      } else {\n        // Default to first category or empty if none exist when creating\n        setSelectedCategory(categories.length > 0 ? categories[0] : '');\n      }\n    }).catch(err => {\n      console.error(\"Error loading data:\", err);\n      setError('Failed to load data.');\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  }, [itemId, isEditing]);\n\n  // Handle category dropdown change\n  const handleCategoryChange = e => {\n    const value = e.target.value;\n    setSelectedCategory(value);\n    if (value === ADD_NEW_CATEGORY_VALUE) {\n      setShowNewCategoryInput(true);\n    } else {\n      setShowNewCategoryInput(false);\n      setNewCategoryName(''); // Clear new category name if selecting existing\n    }\n  };\n\n  // Handle Form Submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    let finalCategory = selectedCategory;\n    if (selectedCategory === ADD_NEW_CATEGORY_VALUE) {\n      if (!newCategoryName.trim()) {\n        alert('Please enter a name for the new category.'); // Basic validation\n        return;\n      }\n      finalCategory = newCategoryName.trim();\n      // TODO: API call to potentially create the new category if it doesn't exist\n      console.log(\"Creating/Using new category:\", finalCategory);\n    }\n\n    // TODO: Add more robust validation\n\n    const itemPayload = {\n      name: itemName,\n      category: finalCategory,\n      quantity: parseFloat(quantity) || 0,\n      price_per_pound: parseFloat(pricePerPound) || 0\n      // Add price_per_box if you have an input & state for it\n      // price_per_box: parseFloat(pricePerBox) || 0 \n    };\n\n    // Clear previous errors\n    setError(null);\n    const saveItem = async () => {\n      setIsLoading(true); // Show loading state during save\n      try {\n        let response;\n        let successMessage;\n        if (isEditing) {\n          console.log(`UPDATING Item ${itemId}:`, itemPayload);\n          // --- Update Item API Call ---\n          response = await fetch(`${API_BASE_URL}/inventory/${itemId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(itemPayload)\n          });\n          successMessage = 'Item updated successfully!';\n        } else {\n          console.log(\"SAVING New Item:\", itemPayload);\n          // --- Create Item API Call ---\n          response = await fetch(`${API_BASE_URL}/inventory`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(itemPayload)\n          });\n          successMessage = 'Item added successfully!';\n        }\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `Failed to ${isEditing ? 'update' : 'save'} item.`);\n        }\n        console.log(successMessage);\n        navigate('/inventory'); // Navigate back only on success\n      } catch (err) {\n        console.error(`Error ${isEditing ? 'updating' : 'saving'} item:`, err);\n        setError(err.message); // Display error on the form page\n      } finally {\n        setIsLoading(false); // Hide loading state\n      }\n    };\n    saveItem(); // Call the async function\n  };\n  const handleCancel = () => {\n    navigate('/inventory');\n  };\n\n  // --- Render Logic ---\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red',\n          padding: '20px'\n        },\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ManagerLayout, {\n    pageTitle: isEditing ? `Edit Item: ${itemName || itemId}` : 'Add New Inventory Item',\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-page-container\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-page-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: isEditing ? 'Edit Item Details' : 'Add New Item'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-page-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleCancel,\n              className: \"button button-secondary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"button button-primary\",\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"itemName\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"itemName\",\n              value: itemName,\n              onChange: e => setItemName(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"itemCategory\",\n              children: \"Item Type / Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"itemCategory\",\n              value: selectedCategory,\n              onChange: handleCategoryChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: !isEditing,\n                children: \"-- Select Category --\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, this), \" \", existingCategories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: cat,\n                children: cat\n              }, cat, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: ADD_NEW_CATEGORY_VALUE,\n                children: \"+ Add New Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), showNewCategoryInput && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"newCategoryName\",\n              children: \"New Category Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"newCategoryName\",\n              value: newCategoryName,\n              onChange: e => setNewCategoryName(e.target.value),\n              placeholder: \"Enter new category name\",\n              required: selectedCategory === ADD_NEW_CATEGORY_VALUE // Make required only when adding\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"quantity\",\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              id: \"quantity\",\n              value: quantity,\n              onChange: e => setQuantity(e.target.value),\n              required: true,\n              placeholder: \"e.g., 50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-field\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"pricePerPound\",\n              children: \"Price / Pound ($)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              id: \"pricePerPound\",\n              value: pricePerPound,\n              onChange: e => setPricePerPound(e.target.value),\n              required: true,\n              placeholder: \"e.g., 4.99\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n_s(AddInventoryItem, \"/By/vv6wXsrVZ/9ckHLLyqNjmnY=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = AddInventoryItem;\nexport default AddInventoryItem;\nvar _c;\n$RefreshReg$(_c, \"AddInventoryItem\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","ManagerLayout","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","fetchInventoryItemData","itemId","console","log","allItems","id","name","quantity","pricePerPound","category","foundItem","find","item","Promise","resolve","fetchCategories","ADD_NEW_CATEGORY_VALUE","AddInventoryItem","_s","navigate","isEditing","Boolean","itemName","setItemName","setQuantity","setPricePerPound","selectedCategory","setSelectedCategory","newCategoryName","setNewCategoryName","showNewCategoryInput","setShowNewCategoryInput","existingCategories","setExistingCategories","isLoading","setIsLoading","error","setError","all","then","categories","itemData","undefined","String","includes","prev","length","catch","err","finally","handleCategoryChange","e","value","target","handleSubmit","preventDefault","finalCategory","trim","alert","itemPayload","parseFloat","price_per_pound","saveItem","response","successMessage","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","handleCancel","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","padding","pageTitle","className","onSubmit","type","onClick","htmlFor","onChange","required","disabled","map","cat","placeholder","step","_c","$RefreshReg$"],"sources":["/Users/christiansarmiento/Documents/GitHub/Atlas-V2/client/src/pages/AddInventoryItem.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport ManagerLayout from '../components/ManagerLayout';\nimport '../styles/FormPage.css'; // Shared form styles\n\n// Base URL for the API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// --- Sample Data Fetching (Replace with actual API calls) ---\nconst fetchInventoryItemData = (itemId) => {\n  console.log(\"Fetching data for item ID:\", itemId);\n  // Simulate finding item data\n  const allItems = [\n    { id: 'b1', name: 'Ribeye', quantity: 25, pricePerPound: 12.99, category: 'Beef' },\n    { id: 'p1', name: 'Chicken Breast', quantity: 80, pricePerPound: 3.99, category: 'Poultry' },\n    // ... other items\n  ];\n  const foundItem = allItems.find(item => item.id === itemId);\n  return foundItem ? Promise.resolve(foundItem) : Promise.resolve(null);\n};\n\nconst fetchCategories = () => {\n    // Simulate fetching existing categories\n    return Promise.resolve(['Beef', 'Poultry', 'Pork', 'Miscellaneous']);\n};\n// --- End Sample Data Fetching ---\n\nconst ADD_NEW_CATEGORY_VALUE = '__add_new__';\n\nfunction AddInventoryItem() {\n  const navigate = useNavigate();\n  const { itemId } = useParams();\n  const isEditing = Boolean(itemId);\n\n  // Form State\n  const [itemName, setItemName] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [pricePerPound, setPricePerPound] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState(''); // Holds the value from dropdown\n  const [newCategoryName, setNewCategoryName] = useState('');\n  const [showNewCategoryInput, setShowNewCategoryInput] = useState(false);\n\n  // Data State\n  const [existingCategories, setExistingCategories] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch categories and item data (if editing)\n  useEffect(() => {\n    setIsLoading(true);\n    Promise.all([fetchCategories(), isEditing ? fetchInventoryItemData(itemId) : Promise.resolve(null)])\n      .then(([categories, itemData]) => {\n        setExistingCategories(categories || []);\n        \n        if (isEditing) {\n          if (itemData) {\n            setItemName(itemData.name || '');\n            setQuantity(itemData.quantity !== undefined ? String(itemData.quantity) : '');\n            setPricePerPound(itemData.pricePerPound !== undefined ? String(itemData.pricePerPound) : '');\n            // Ensure the item's category is selected, even if it was newly created before\n            if (itemData.category && !categories.includes(itemData.category)) {\n                 setExistingCategories(prev => [...prev, itemData.category]);\n            }\n            setSelectedCategory(itemData.category || '');\n\n          } else {\n            setError('Inventory item not found.');\n          }\n        } else {\n             // Default to first category or empty if none exist when creating\n             setSelectedCategory(categories.length > 0 ? categories[0] : '');\n        }\n      })\n      .catch(err => {\n        console.error(\"Error loading data:\", err);\n        setError('Failed to load data.');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [itemId, isEditing]);\n\n  // Handle category dropdown change\n  const handleCategoryChange = (e) => {\n    const value = e.target.value;\n    setSelectedCategory(value);\n    if (value === ADD_NEW_CATEGORY_VALUE) {\n      setShowNewCategoryInput(true);\n    } else {\n      setShowNewCategoryInput(false);\n      setNewCategoryName(''); // Clear new category name if selecting existing\n    }\n  };\n\n  // Handle Form Submission\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let finalCategory = selectedCategory;\n    if (selectedCategory === ADD_NEW_CATEGORY_VALUE) {\n        if (!newCategoryName.trim()) {\n            alert('Please enter a name for the new category.'); // Basic validation\n            return;\n        }\n        finalCategory = newCategoryName.trim();\n        // TODO: API call to potentially create the new category if it doesn't exist\n        console.log(\"Creating/Using new category:\", finalCategory);\n    }\n\n    // TODO: Add more robust validation\n    \n    const itemPayload = {\n        name: itemName,\n        category: finalCategory,\n        quantity: parseFloat(quantity) || 0,\n        price_per_pound: parseFloat(pricePerPound) || 0,\n        // Add price_per_box if you have an input & state for it\n        // price_per_box: parseFloat(pricePerBox) || 0 \n    };\n\n    // Clear previous errors\n    setError(null);\n\n    const saveItem = async () => {\n        setIsLoading(true); // Show loading state during save\n        try {\n            let response;\n            let successMessage;\n\n            if (isEditing) {\n                console.log(`UPDATING Item ${itemId}:`, itemPayload);\n                // --- Update Item API Call ---\n                response = await fetch(`${API_BASE_URL}/inventory/${itemId}`, {\n                    method: 'PUT',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(itemPayload)\n                });\n                successMessage = 'Item updated successfully!';\n            } else {\n                console.log(\"SAVING New Item:\", itemPayload);\n                // --- Create Item API Call ---\n                response = await fetch(`${API_BASE_URL}/inventory`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(itemPayload)\n                });\n                successMessage = 'Item added successfully!';\n            }\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || `Failed to ${isEditing ? 'update' : 'save'} item.`);\n            }\n\n            console.log(successMessage);\n            navigate('/inventory'); // Navigate back only on success\n\n        } catch (err) {\n            console.error(`Error ${isEditing ? 'updating' : 'saving'} item:`, err);\n            setError(err.message); // Display error on the form page\n        } finally {\n            setIsLoading(false); // Hide loading state\n        }\n    };\n\n    saveItem(); // Call the async function\n  };\n\n  const handleCancel = () => {\n    navigate('/inventory');\n  };\n\n  // --- Render Logic ---\n  if (isLoading) {\n    return <ManagerLayout><div>Loading...</div></ManagerLayout>;\n  }\n\n  if (error) {\n    return <ManagerLayout><div style={{ color: 'red', padding: '20px' }}>Error: {error}</div></ManagerLayout>;\n  }\n\n  return (\n    <ManagerLayout pageTitle={isEditing ? `Edit Item: ${itemName || itemId}` : 'Add New Inventory Item'}>\n      <div className=\"form-page-container\">\n        <form onSubmit={handleSubmit}>\n           {/* Use same header structure as AddEmployee */}\n          <div className=\"form-page-header\">\n            <h2>{isEditing ? 'Edit Item Details' : 'Add New Item'}</h2>\n            <div className=\"form-page-actions\">\n              <button type=\"button\" onClick={handleCancel} className=\"button button-secondary\">Cancel</button>\n              <button type=\"submit\" className=\"button button-primary\">Confirm</button>\n            </div>\n          </div>\n\n          {/* Form Fields */}\n          <div className=\"form-grid\">\n            <div className=\"form-field\">\n              <label htmlFor=\"itemName\">Name</label>\n              <input type=\"text\" id=\"itemName\" value={itemName} onChange={(e) => setItemName(e.target.value)} required />\n            </div>\n            \n            <div className=\"form-field\">\n              <label htmlFor=\"itemCategory\">Item Type / Category</label>\n              <select id=\"itemCategory\" value={selectedCategory} onChange={handleCategoryChange} required>\n                <option value=\"\" disabled={!isEditing}>-- Select Category --</option> {/* Allow empty selection only if not editing */} \n                {existingCategories.map(cat => (\n                    <option key={cat} value={cat}>{cat}</option>\n                ))}\n                <option value={ADD_NEW_CATEGORY_VALUE}>+ Add New Category</option>\n              </select>\n            </div>\n\n            {/* Conditionally show input for new category name */} \n            {showNewCategoryInput && (\n                <div className=\"form-field\">\n                    <label htmlFor=\"newCategoryName\">New Category Name</label>\n                    <input \n                        type=\"text\" \n                        id=\"newCategoryName\" \n                        value={newCategoryName} \n                        onChange={(e) => setNewCategoryName(e.target.value)} \n                        placeholder=\"Enter new category name\" \n                        required={selectedCategory === ADD_NEW_CATEGORY_VALUE} // Make required only when adding\n                    />\n                </div>\n            )}\n\n            <div className=\"form-field\">\n              <label htmlFor=\"quantity\">Quantity</label>\n              <input type=\"number\" id=\"quantity\" value={quantity} onChange={(e) => setQuantity(e.target.value)} required placeholder=\"e.g., 50\"/>\n            </div>\n\n            <div className=\"form-field\">\n              <label htmlFor=\"pricePerPound\">Price / Pound ($)</label>\n              <input type=\"number\" step=\"0.01\" id=\"pricePerPound\" value={pricePerPound} onChange={(e) => setPricePerPound(e.target.value)} required placeholder=\"e.g., 4.99\"/>\n            </div>\n          </div>\n        </form>\n      </div>\n    </ManagerLayout>\n  );\n}\n\nexport default AddInventoryItem; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}